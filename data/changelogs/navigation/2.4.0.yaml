libraryId: navigation
groupId: androidx.navigation
version: 2.4.0
releaseDate: 2022-01-26
#language=html
changelogHtml: |
  <h3 id="2.4.0" data-text="Version 2.4.0" tabindex="-1">Version 2.4.0</h3>
  <p>January 26, 2022</p>
  <p>
    <code translate="no" dir="ltr">androidx.navigation:navigation-*:2.4.0</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/ee27dabb830fecc2bb6899cb460d977a31d90612..06c50aeb46902c0559e3fdaf3bb0ea031f910e78/navigation">Version 2.4.0 contains these commits.</a>
  </p>
  <p><strong>Important changes since 2.3.0</strong></p>
  <ul>
    <li>
      All Navigation artifacts have been rewritten in Kotlin. This has improved the nullability of classes using generics (such as
      <code translate="no" dir="ltr">NavType</code>
      subclasses). All Kotlin extension functions that used to be part of the
      <code translate="no" dir="ltr">-ktx</code>
      artifacts have been moved to their respective main artifacts. The
      <code translate="no" dir="ltr">-ktx</code>
      artifacts will continue to be published, but are completely empty.
    </li>
    <li>
      The
      <code translate="no" dir="ltr">navigation-fragment</code>
      artifact now contains a prebuilt implementation of a
      <a href="/guide/topics/ui/layout/twopane">two pane layout</a>
      via the new
      <code translate="no" dir="ltr">AbstractListDetailFragment</code>
      . This fragment uses a
      <code translate="no" dir="ltr">SlidingPaneLayout</code>
      to manage a list pane (which your subclass provides) and a detail pane, which uses a
      <code translate="no" dir="ltr">NavHostFragment</code>
      as its implementation, as seen in our
      <a href="https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:navigation/integration-tests/testapp/src/main/java/androidx/navigation/testapp/TwoPaneFragment.kt">example implementation</a>
      .
    </li>
    <li>
      The
      <code translate="no" dir="ltr">currentBackStackEntryAsFlow()</code>
      method on
      <code translate="no" dir="ltr">NavController</code>
      provides a
      <code translate="no" dir="ltr">Flow</code>
      that emits whenever the current
      <code translate="no" dir="ltr">NavBackStackEntry</code>
      changes. This flow can be used as an alternative to manually managing an
      <code translate="no" dir="ltr">OnDestinationChangedListener</code>
      .
    </li>
    <li>
      NavController now offers the ability to retrieve a list of all visible
      <code translate="no" dir="ltr">NavBackStackEntry</code>
      instances as a
      <code translate="no" dir="ltr">StateFlow</code>
      via the experimental
      <code translate="no" dir="ltr">visibleEntries</code>
      property.
    </li>
    <li>
      It is now possible to extend the
      <code translate="no" dir="ltr">NavType</code>
      class to create custom NavTypes. Custom types are supported only when building your navigation graph programmatically, such as via the
      <a href="/guide/navigation/navigation-kotlin-dsl">Navigation Graph Kotlin DSL</a>
      .
    </li>
    <li>
      <p>
        Navigation now provides
        <code translate="no" dir="ltr">findStartDestination()</code>
        and
        <code translate="no" dir="ltr">getHierarchy()</code>
        APIs that can be used to help implement custom NavigationUI.
        <code translate="no" dir="ltr">findStartDestination()</code>
        is an extension function on
        <code translate="no" dir="ltr">NavGraph</code>
        that will locate the actual start destination that will be displayed when you navigate to the graph, even if the
        <code translate="no" dir="ltr">startDestination</code>
        is itself a nested
        <code translate="no" dir="ltr">NavGraph</code>
        .
        <code translate="no" dir="ltr">getHierarchy()</code>
        is a function on
        <code translate="no" dir="ltr">NavDestination</code>
        that can be used to verify if a given destination is within the hierarchy of another.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">matchingRoute</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Boolean</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">destination</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">hierarchy</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">any</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">route</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">==</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">routeToFind</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">NavigationUI</code>
        methods that took a
        <code translate="no" dir="ltr">BottomNavigationView</code>
        have been updated to instead take its superclass introduced in Material
        <code translate="no" dir="ltr">1.4.0</code>
        ,
        <code translate="no" dir="ltr">NavigationBarView</code>
        . This allows these methods to be used with the
        <code translate="no" dir="ltr">NavigationRailView</code>
        .
      </p>
    </li>
    <li>
      <p>
        When inflating an
        <code translate="no" dir="ltr">&lt;action&gt;</code>
        element via XML, animation attributes can use attributes pulled from your theme using the
        <code translate="no" dir="ltr">app:enterAnim="?attr/transitionEnter"</code>
        syntax.
      </p>
    </li>
    <li>
      <p>
        Safe Args now generates a
        <code translate="no" dir="ltr">fromSavedStateHandle()</code>
        method for each
        <code translate="no" dir="ltr">NavArgs</code>
        class. (
        <a href="https://github.com/androidx/androidx/pull/122">#122</a>
        ,
        <a href="https://issuetracker.google.com/136967621">b/136967621</a>
        )
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">HomeViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">savedStateHandle</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">SavedStateHandle</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewModel</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// Create a HomeDestinationArgs class with type safe accessors for each argument</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// defined on your destination</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-kd">private</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">args</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">HomeDestinationArgs</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">fromSavedStateHandle</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">savedStateHandle</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
  </ul>
  <p><strong>Navigation Routes and the Kotlin DSL</strong></p>
  <p>
    Previous versions of Navigation relied on each destination having a constant integer ID that would uniquely identify it from its sibling destinations and allow you to
    <code translate="no" dir="ltr">navigate()</code>
    to that destination either directly or via an action. While this continues to be valid and useful, particularly in cases where you are defining your navigation graph in XML and can use auto-generated
    <code translate="no" dir="ltr">R.id</code>
    constants or Safe Args (which uses those constants to generate code at build time), this system of unique integers did not capture the semantic meaning and expressiveness needed to support fully dynamic graphs built programmatically at runtime via the
    <a href="https://developer.android.com/guide/navigation/navigation-kotlin-dsl">Navigation Kotlin DSL</a>
    .
  </p>
  <p>
    This release introduces a new option for uniquely identifying a destination in a navigation graph by its
    <strong>route</strong>
    . A
    <strong>route</strong>
    is a
    <code translate="no" dir="ltr">String</code>
    that defines the unique path to a destination. All Kotlin DSL methods that took a destination ID are now deprecated and replaced with an equivalent API that takes a route.
  </p>
  <p>
    Each route should be treated as the ‘path’ part of a
    <code translate="no" dir="ltr">Uri</code>
    that defines that destination, e.g.,
    <code translate="no" dir="ltr">home</code>
    ,
    <code translate="no" dir="ltr">profile/{userId}</code>
    ,
    <code translate="no" dir="ltr">profile/{userId}/friends</code>
    , etc. When the identity of a destination is associated with a specific piece of content, those dynamic arguments should be part of the route, following the same rules as
    <a href="https://developer.android.com/guide/navigation/navigation-deep-link#implicit">implicit deep links</a>
    .
  </p>
  <p>
    All
    <code translate="no" dir="ltr">NavController</code>
    APIs that used to only take an ID now have an overload that takes a route
    <code translate="no" dir="ltr">String</code>
    . This includes
    <code translate="no" dir="ltr">navigate()</code>
    ,
    <code translate="no" dir="ltr">popBackStack()</code>
    ,
    <code translate="no" dir="ltr">popUpTo()</code>
    , and
    <code translate="no" dir="ltr">getBackStackEntry()</code>
    .
  </p>
  <p>This has had some API implications:</p>
  <ul>
    <li>
      The
      <code translate="no" dir="ltr">popUpTo</code>
      Kotlin property on the Kotlin DSL has been deprecated in favor of
      <code translate="no" dir="ltr">popUpToId</code>
      .
    </li>
    <li>
      The
      <code translate="no" dir="ltr">getStartDestination()</code>
      API has been deprecated in favor of
      <code translate="no" dir="ltr">getStartDestinationId()</code>
      .
    </li>
  </ul>
  <p>
    Unlike when navigating by ID, navigating by route follows the same rules as
    <a href="https://developer.android.com/guide/navigation/navigation-deep-link#implicit">implicit deep links</a>
    in that you can directly navigate to any destination in any nested graph, ensuring that these routes are usable in
    <a href="https://developer.android.com/guide/navigation/navigation-multi-module">multi-module projects</a>
    without explicitly adding an externally visible deep link to each destination.
  </p>
  <p><strong>Navigation Compose</strong></p>
  <p>
    The
    <code translate="no" dir="ltr">navigation-compose</code>
    artifact provides integration between the
    <a href="/navigation">Navigation Component</a>
    and
    <a href="/jetpack/compose">Jetpack Compose</a>
    . It uses
    <code translate="no" dir="ltr">@Composable</code>
    functions as the destinations in your application.
  </p>
  <p>This release provides:</p>
  <ul>
    <li>
      A
      <code translate="no" dir="ltr">NavHost</code>
      composable that allows you to construct your navigation graph via a Kotlin DSL, using
      <code translate="no" dir="ltr">composable</code>
      and
      <code translate="no" dir="ltr">dialog</code>
      destinations, plus support for optional Navigators such as those from
      <a href="https://google.github.io/accompanist/navigation-material/">Accompanist Navigation Material</a>
      .
    </li>
    <li>
      Mandatory support for crossfading between destinations.
      <a href="https://google.github.io/accompanist/navigation-animation/">Accompanist Navigation Animation</a>
      can be used to control the enter and exit transitions using experimental Compose APIs.
    </li>
    <li>
      Scoping of a
      <code translate="no" dir="ltr">Lifecycle</code>
      to each composable destination. Each destination only reaches the
      <code translate="no" dir="ltr">RESUMED</code>
      state when any entering transitions finish and immediately drops to
      <code translate="no" dir="ltr">STARTED</code>
      when any exiting transitions start, thus allowing you to avoid all
      <code translate="no" dir="ltr">IllegalStateException</code>
      and multi-touch issues by only triggering a
      <code translate="no" dir="ltr">navigate</code>
      call when the
      <code translate="no" dir="ltr">Lifecycle</code>
      is
      <code translate="no" dir="ltr">RESUMED</code>
      .
    </li>
    <li>
      Scoping of
      <code translate="no" dir="ltr">ViewModel</code>
      (via the
      <code translate="no" dir="ltr">viewModel()</code>
      API of
      <a href="/jetpack/androidx/releases/lifecycle#2.4.0">
        Lifecycle ViewModel Compose
        <code translate="no" dir="ltr">2.4.0</code>
      </a>
      or
      <code translate="no" dir="ltr">hiltViewModel()</code>
      of
      <a href="/jetpack/androidx/releases/hilt#hilt-navigation-compose-1.0.0">
        Hilt Navigation Compose
        <code translate="no" dir="ltr">1.0.0</code>
      </a>
      at the destination level, providing a scope that survives configuration changes and being on the back stack (when your Composable content is otherwise disposed) and a signal in the ViewModel’s
      <code translate="no" dir="ltr">onCleared()</code>
      that indicates the permanent disposal and cleaning up of state associated with that
      <code translate="no" dir="ltr">NavBackStackEntry</code>
      .
    </li>
    <li>
      Scoping of
      <code translate="no" dir="ltr">rememberSaveable</code>
      state at a destination level, ensuring that all composable state is saved and restored automatically when you return to a destination.
    </li>
    <li>
      Full support for saving and restoring the state of the
      <code translate="no" dir="ltr">NavController</code>
      and its destination’s state after process death and recreation.
    </li>
    <li>Automatic integration with the system back button.</li>
    <li><p>Support for passing arguments, attaching deep links to destinations, and returning a result to previous destinations.</p></li>
    <li>
      <p>
        Compose specific helpers in
        <code translate="no" dir="ltr">rememberNavController()</code>
        and
        <code translate="no" dir="ltr">currentBackStackEntryAsState()</code>
        to allow
        <a href="/jetpack/compose/state#state-hoisting">hoisting state</a>
        and connecting the
        <code translate="no" dir="ltr">NavController</code>
        to composables outside of the
        <code translate="no" dir="ltr">NavHost</code>
        (such as a bottom navigation bar).
      </p>
    </li>
  </ul>
  <div></div>
  <devsite-code>
    <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">navController</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">rememberNavController</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-n">Scaffold</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">innerPadding</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">-</span>&gt;
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">NavHost</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">navController</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-s">"home"</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Modifier</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">padding</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">innerPadding</span><span class="devsite-syntax-p">))</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-n">composable</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-s">"home"</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-c1">// This content fills the area provided to the NavHost</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-n">HomeScreen</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-n">dialog</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-s">"detail_dialog"</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-c1">// This content will be automatically added to a Dialog() composable</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-c1">// and appear above the HomeScreen or other composable destinations</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-n">DetailDialogContent</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
  </devsite-code>
  <p>
    See the
    <a href="/jetpack/compose/navigation">Compose Navigation guide</a>
    for more information.
  </p>
  <p><strong>Multiple back stacks</strong></p>
  <p>
    The NavController is responsible for managing the back stack of destinations, adding destinations to the back stack when you
    <code translate="no" dir="ltr">navigate()</code>
    to them and removing them when you call
    <code translate="no" dir="ltr">popBackStack()</code>
    or trigger the system back button. The existing
    <a href="/reference/kotlin/androidx/navigation/NavOptions"><code translate="no" dir="ltr">NavOptions</code></a>
    class and the integration into
    <code translate="no" dir="ltr">&lt;action&gt;</code>
    elements in the navigation graph XML has been expanded to support saving and restoring the back stack.
  </p>
  <p>
    As part of this change, the
    <code translate="no" dir="ltr">NavigationUI</code>
    methods of
    <code translate="no" dir="ltr">onNavDestinationSelected()</code>
    ,
    <code translate="no" dir="ltr">BottomNavigationView.setupWithNavController()</code>
    and
    <code translate="no" dir="ltr">NavigationView.setupWithNavController()</code>
    now automatically save and restore the state of popped destinations, enabling support for multiple back stacks without any code changes. When using Navigation with Fragments, this is the recommended way to integrate with multiple back stacks.
  </p>
  <p>The underlying APIs for saving and restoring the state are exposed via a number of surfaces:</p>
  <ul>
    <li>
      <p>
        In Navigation XML, the
        <code translate="no" dir="ltr">&lt;action&gt;</code>
        element can now use the boolean attributes of
        <code translate="no" dir="ltr">app:popUpToSaveState</code>
        and
        <code translate="no" dir="ltr">app:restoreState</code>
        to save the state of any destinations popped via
        <code translate="no" dir="ltr">app:popUpTo</code>
        and restore the state associated with the destination passed as the
        <code translate="no" dir="ltr">app:destination</code>
        :
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="XML"><code translate="no" dir="ltr">&lt;action
  <span class="devsite-syntax-w">  </span>android:id=”@+id/swap_stack”
  <span class="devsite-syntax-w">  </span>app:destination=”@id/second_stack”
  <span class="devsite-syntax-w">  </span>app:restoreState=”true”
  <span class="devsite-syntax-w">  </span>app:popUpTo=”@id/first_stack_start_destination”
  <span class="devsite-syntax-w">  </span>app:popUpToSaveState=”true”<span class="devsite-syntax-w"> </span>/&gt;
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        In the
        <a href="/reference/kotlin/androidx/navigation/package-summary#navoptions">
          <code translate="no" dir="ltr">navOptions</code>
          Kotlin DSL
        </a>
        , you can add the
        <code translate="no" dir="ltr">restoreState</code>
        boolean property and the
        <code translate="no" dir="ltr">saveState</code>
        boolean property on the
        <a href="/reference/kotlin/androidx/navigation/NavOptionsBuilder#popupto">
          <code translate="no" dir="ltr">popUpTo</code>
          builder
        </a>
        :
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-c1">// Use the navigate() method that takes a navOptions DSL Builder</span>
  <span class="devsite-syntax-n">navController</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">navigate</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">selectedBottomNavRoute</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">launchSingleTop</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kc">true</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">restoreState</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kc">true</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">popUpTo</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">navController</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">graph</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">findStartDestination</span><span class="devsite-syntax-p">().</span><span class="devsite-syntax-na">id</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">saveState</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kc">true</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        In manually building a
        <code translate="no" dir="ltr">NavOptions</code>
        object via the
        <a href="/reference/kotlin/androidx/navigation/NavOptions.Builder"><code translate="no" dir="ltr">NavOptions.Builder</code></a>
        , you can use the
        <code translate="no" dir="ltr">setRestoreState()</code>
        and new overload to
        <code translate="no" dir="ltr">setPopUpTo()</code>
        that takes an additional
        <code translate="no" dir="ltr">saveState</code>
        parameter.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Java"><code translate="no" dir="ltr"><span class="devsite-syntax-n">NavOptions</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">navOptions</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">new</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">NavOptions</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">Builder</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">setLaunchSingleTop</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-kc">true</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">setRestoreState</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-kc">true</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">setPopUpTo</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">NavGraph</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">findStartDestination</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">navController</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">getGraph</span><span class="devsite-syntax-p">()).</span><span class="devsite-syntax-na">getId</span><span class="devsite-syntax-p">(),</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kc">false</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-c1">// inclusive</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kc">true</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-c1">// saveState</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">build</span><span class="devsite-syntax-p">();</span>
  <span class="devsite-syntax-n">navController</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">navigate</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">selectedBottomNavId</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kc">null</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">navOptions</span><span class="devsite-syntax-p">);</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        Programmatic calls to
        <a href="/reference/kotlin/androidx/navigation/NavController#popbackstack"><code translate="no" dir="ltr">popBackStack()</code></a>
        can now include an additional
        <code translate="no" dir="ltr">saveState</code>
        parameter.
      </p>
    </li>
    <li>
      <p>
        You can use the
        <code translate="no" dir="ltr">clearBackStack()</code>
        method to clear any state that was saved with
        <code translate="no" dir="ltr">popBackStack()</code>
        or
        <code translate="no" dir="ltr">popUpToSaveState</code>
        .
      </p>
    </li>
  </ul>
  <p>
    In all cases, the
    <code translate="no" dir="ltr">NavController</code>
    will save and restore the state of each
    <code translate="no" dir="ltr">NavBackStackEntry</code>
    , including any navigation destination scoped
    <code translate="no" dir="ltr">ViewModel</code>
    instances. The
    <a href="/reference/kotlin/androidx/navigation/Navigator"><code translate="no" dir="ltr">Navigator</code></a>
    APIs have been updated to enable each
    <code translate="no" dir="ltr">Navigator</code>
    to support saving and restoring their own state.
  </p>
  <p><strong>Behavior changes</strong></p>
  <ul>
    <li>
      <code translate="no" dir="ltr">NavDeepLinkBuilder</code>
      now adds
      <code translate="no" dir="ltr">PendingIntent.FLAG_IMMUTABLE</code>
      to the
      <code translate="no" dir="ltr">PendingIntent</code>
      returned by
      <code translate="no" dir="ltr">createPendingIntent()</code>
      , ensuring that this API works as expected when targeting Android 12.
    </li>
    <li>
      Navigation now depends on
      <a href="/jetpack/androidx/releases/lifecycle#2.3.1">
        Lifecycle
        <code translate="no" dir="ltr">2.3.1</code>
      </a>
      and now marks
      <code translate="no" dir="ltr">setGraph()</code>
      ,
      <code translate="no" dir="ltr">popBackStack()</code>
      ,
      <code translate="no" dir="ltr">navigateUp()</code>
      , and
      <code translate="no" dir="ltr">navigate()</code>
      , the methods that update the
      <code translate="no" dir="ltr">NavBackStackEntry</code>
      <code translate="no" dir="ltr">Lifecycle</code>
      , as
      <code translate="no" dir="ltr">@MainThread</code>
      , aligning Navigation with the main thread enforcement introduced in Lifecycle
      <code translate="no" dir="ltr">2.3.0</code>
      .
    </li>
    <li>
      Deep links now verify that all required arguments (those without default values) are present in the
      <code translate="no" dir="ltr">Uri</code>
      .
    </li>
    <li>
      <code translate="no" dir="ltr">NavDeepLink</code>
      parsed arguments now consider pound signs in the same way as question marks as a separator between path segments, preventing an argument from spanning across the pound sign.
    </li>
    <li>When generating actions, Kotlin code generated from Safe Args now puts arguments without default values before those with default values as parameters.</li>
    <li>When generating arguments, Safe Args now puts parameters without default values before those with default values.</li>
    <li>
      Safe-Args now depends on Android Gradle Plugin 4.2.0. This means you should no longer get the using
      <code translate="no" dir="ltr">applicationIdTextResource</code>
      warning.
    </li>
  </ul>
  <p><strong>Known issues</strong></p>
  <ul>
    <li>
      Fixed in
      <a href="#2.5.0-alpha01">
        Navigation
        <code translate="no" dir="ltr">2.5.0-alpha01</code>
      </a>
      : accessing a
      <code translate="no" dir="ltr">ViewModel</code>
      created via
      <code translate="no" dir="ltr">by navGraphViewModels()</code>
      from a Fragment's
      <code translate="no" dir="ltr">onCreate()</code>
      will fail with an
      <code translate="no" dir="ltr">IllegalStateException</code>
      . (
      <a href="https://issuetracker.google.com/213504272">b/213504272</a>
      )
    </li>
    <li>
      Fixed in
      <a href="#2.5.0-alpha01">
        Navigation
        <code translate="no" dir="ltr">2.5.0-alpha01</code>
      </a>
      : Safe Args 2.4.0 is incompatible with Android Gradle Plugin 7.1.0 and higher. (
      <a href="https://issuetracker.google.com/213086135">b/213086135</a>
      )
    </li>
    <li>
      Deep linking with multiple nested nav graphs doesn't correctly create the full backstack. (
      <a href="https://issuetracker.google.com/214383060">b/214383060</a>
      )
    </li>
  </ul>
