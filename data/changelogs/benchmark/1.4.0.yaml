libraryId: benchmark
groupId: androidx.benchmark
version: 1.4.0
releaseDate: 2025-07-30
#language=html
changelogHtml: |
  <h3 id="1.4.0" data-text="Version 1.4.0" tabindex="-1">Version 1.4.0</h3>
  <p>July 30, 2025</p>
  <p>
    <code translate="no" dir="ltr">androidx.benchmark:benchmark-*:1.4.0</code>
    is released. Version 1.4.0 contains
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/d0f745a0177b6e9fb28e2bf5e4d8f36c12de9181..0c118ebfe8fc41499ab4d4e18d71dd72e2126568/benchmark">these commits</a>
    .
  </p>
  <p><strong>Important changes since 1.3.0</strong></p>
  <p><strong>Microbenchmark</strong></p>
  <ul>
    <li>
      Moved Gradle tasks
      <code translate="no" dir="ltr">lockClocks</code>
      and
      <code translate="no" dir="ltr">unlockClocks</code>
      to be on benchmark projects, instead of at the top level to respect Gradle project isolation.
    </li>
    <li>
      Refactored
      <code translate="no" dir="ltr">BenchmarkRule</code>
      to be built on top of coroutines, and support better
      <code translate="no" dir="ltr">yield()</code>
      behavior. This should significantly reduce the risk of ANRs during benchmark runs, especially long CI runs. Note: UI Benchmarks should run with
      <a href="/reference/kotlin/androidx/benchmark/junit4/BenchmarkRule#(androidx.benchmark.junit4.BenchmarkRule).measureRepeatedOnMainThread(kotlin.Function1)"><code translate="no" dir="ltr">measureRepeatedOnMainThread</code></a>
    </li>
  </ul>
  <p><strong>Macrobenchmark</strong></p>
  <ul>
    <li>
      Added workaround on API 34+ for
      <code translate="no" dir="ltr">CompilationMode.None()</code>
      would have inconsistent performance due to ART's verify now partly compiling apps after first launch.
    </li>
    <li>
      Experimental feature - Startup Insights can highlight certain common issues in a startup Macrobenchmark by passing
      <code translate="no" dir="ltr">MacrobenchmarkRule(..., experimentalConfig = ExperimentalConfig(StartupInsightsConfig(isEnabled = true)))</code>
      .
    </li>
    <li>
      Added
      <a href="https://developer.android.com/reference/kotlin/androidx/benchmark/macro/ArtMetric">ArtMetric</a>
      which can be used to detect JIT Compilation, and unoptimized class loading - both useful for validating Baseline Profile optimizations.
    </li>
  </ul>
  <p><strong>Baseline Profiles</strong></p>
  <ul>
    <li>
      <code translate="no" dir="ltr">BaselineProfileRule</code>
      now collects profiles for multi-process apps.
    </li>
  </ul>
  <p><strong>Other Changes</strong></p>
  <ul>
    <li>
      <a href="https://developer.android.com/reference/androidx/benchmark/traceprocessor/TraceProcessor">TraceProcessor</a>
      has been pulled out into its own library (
      <code translate="no" dir="ltr">androidx.benchmark:benchmark-traceprocessor</code>
      ) so that it can be used outside of
      <code translate="no" dir="ltr">Macrobenchmark</code>
      metrics, in other cases. It can also be run on Desktop JVM by defining your own
      <a href="https://developer.android.com/reference/androidx/benchmark/traceprocessor/ServerLifecycleManager">ServerLifecycleManager</a>
      .
    </li>
  </ul>
