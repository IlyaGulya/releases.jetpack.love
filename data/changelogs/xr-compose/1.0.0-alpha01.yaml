libraryId: xr-compose
groupId: androidx.xr
version: 1.0.0-alpha01
releaseDate: 2024-12-12
#language=html
changelogHtml: |
  <h3 id="1.0.0-alpha01" data-text="Version 1.0.0-alpha01" tabindex="-1">Version 1.0.0-alpha01</h3>
  <p>December 12, 2024</p>
  <p>
    <code translate="no" dir="ltr">androidx.xr.compose:compose-*1.0.0-alpha01</code>
    is released.
  </p>
  <p><strong>Features of Initial Release</strong></p>
  <ul>
    <li>
      <p>
        Initial developer release of Jetpack Compose for XR. Use familiar Compose concepts such as rows and columns to create spatial UI layouts in XR, whether you're porting an existing 2D app to XR or creating a new XR app from scratch. This library provides subspace and spatial composables: such as spatial panels and orbiters, which let you place your existing 2D Compose or Views-based UI in a spatial layout. It introduces the Volume subspace composable, which allows you to place SceneCore entities, such as 3D models, relative to your UI. Learn more in this
        <a href="/develop/xr/jetpack-xr-sdk/develop-ui">developer guide</a>
        :
      </p>

      <ul>
        <li>
          <p>
            <a href="/reference/kotlin/androidx/xr/compose/spatial/package-summary#Subspace(kotlin.Function1)"><code translate="no" dir="ltr">Subspace</code></a>
            : This composable can be placed anywhere within your app’s UI hierarchy, allowing you to maintain layouts for 2D and spatial UI without losing context between files. This makes it easier to share things like existing app architecture between XR and other form factors without needing to hoist state through your whole UI tree or re-architect your app.
          </p>
        </li>
        <li>
          <p>
            <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#SpatialPanel(android.content.Intent,androidx.xr.compose.subspace.layout.SubspaceModifier,kotlin.String,androidx.xr.compose.subspace.layout.SpatialShape)">SpatialPanel</a>
            : A spatial panel is a subspace composable that lets you display app content–for example, you could display video playback, still images, or any other content in a spatial panel.
          </p>
        </li>
        <li>
          <p>
            <a href="/reference/kotlin/androidx/xr/compose/spatial/package-summary#Orbiter(androidx.xr.compose.spatial.OrbiterEdge.Horizontal,androidx.compose.ui.unit.Dp,androidx.compose.ui.Alignment.Horizontal,androidx.xr.compose.spatial.OrbiterSettings,androidx.xr.compose.subspace.layout.SpatialShape,kotlin.Function0)">Orbiter</a>
            : An orbiter is a spatial UI component. It's designed to be attached to a corresponding spatial panel, and contains navigation and contextual action items related to that spatial panel. For example, if you've created a spatial panel to display video content, you could add video playback controls inside an orbiter.
          </p>
        </li>
        <li>
          <p>
            <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#Volume(androidx.xr.compose.subspace.layout.SubspaceModifier,kotlin.String,kotlin.Function1)">Volume</a>
            : Place SceneCore entities, such as 3D models, relative to your UI.
          </p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        Spatial Layout: You can create multiple spatial panels and place them within a Spatial Layout using
        <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#SpatialRow(androidx.xr.compose.subspace.layout.SubspaceModifier,androidx.xr.compose.subspace.layout.SpatialAlignment,androidx.compose.ui.unit.Dp,kotlin.String,kotlin.Function1)"><code translate="no" dir="ltr">SpatialRow</code></a>
        ,
        <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#SpatialColumn(androidx.xr.compose.subspace.layout.SubspaceModifier,androidx.xr.compose.subspace.layout.SpatialAlignment,kotlin.String,kotlin.Function1)"><code translate="no" dir="ltr">SpatialColumn</code></a>
        ,
        <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#SpatialBox(androidx.xr.compose.subspace.layout.SubspaceModifier,androidx.xr.compose.subspace.layout.SpatialAlignment,kotlin.Boolean,kotlin.String,kotlin.Function1)"><code translate="no" dir="ltr">SpatialBox</code></a>
        , and
        <a href="/reference/kotlin/androidx/xr/compose/subspace/package-summary#SpatialLayoutSpacer(androidx.xr.compose.subspace.layout.SubspaceModifier)"><code translate="no" dir="ltr">SpatialLayoutSpacer</code></a>
        . Use
        <code translate="no" dir="ltr">SubspaceModifier</code>
        s to customize your layout.
      </p>
    </li>
    <li>
      <p>Spatial UI components: These elements can be reused in your 2D UI, and their spatial attributes will only be visible when spatial capabilities are enabled.</p>

      <ul>
        <li>
          <a href="/kotlin/androidx/xr/compose/spatial/package-summary#SpatialDialog(kotlin.Function0,androidx.xr.compose.spatial.SpatialDialogProperties,kotlin.Function0)"><code translate="no" dir="ltr">SpatialDialog</code></a>
          : Panel will push slightly back in z-depth to display an elevated dialog.
        </li>
        <li>
          <a href="/reference/kotlin/androidx/xr/compose/spatial/package-summary#SpatialPopup(androidx.xr.compose.spatial.SpatialElevationLevel,kotlin.Function1)"><code translate="no" dir="ltr">SpatialPopUp</code></a>
          : Panel will push slightly back in z-depth to display an elevated popup
        </li>
        <li>
          <a href="/reference/kotlin/androidx/xr/compose/spatial/package-summary#SpatialElevation(androidx.xr.compose.spatial.SpatialElevationLevel,kotlin.Function0)"><code translate="no" dir="ltr">SpatialElevation</code></a>
          :
          <code translate="no" dir="ltr">SpatialElevationLevel</code>
          can be set to add elevation.
        </li>
      </ul>
    </li>
    <li>
      <p>
        SpatialCapabilities: Spatial capabilities can change as users interact with your app or the system, or can even be changed by your app itself—for example, moving into Home Space or Full Space. To avoid issues, your app needs to check for
        <a href="/reference/kotlin/androidx/xr/compose/platform/package-summary#LocalSpatialCapabilities()"><code translate="no" dir="ltr">LocalSpatialCapabilities.current</code></a>
        to determine which APIs are supported in the current environment.
        <a href="/reference/kotlin/androidx/xr/compose/platform/SpatialCapabilities#isSpatialUiEnabled()"><code translate="no" dir="ltr">isSpatialUiEnabled</code></a>
        :
        <a href="/develop/xr/jetpack-xr-sdk/develop-ui">Spatial UI elements</a>
        (e.g. SpatialPanel)
        <a href="/reference/kotlin/androidx/xr/compose/platform/SpatialCapabilities#isContent3dEnabled()"><code translate="no" dir="ltr">isContent3dEnabled</code></a>
        :
        <a href="/develop/xr/jetpack-xr-sdk/add-3d-models">3D objects</a>
        <a href="/reference/kotlin/androidx/xr/compose/platform/SpatialCapabilities#isAppEnvironmentEnabled()"><code translate="no" dir="ltr">isAppEnvironmentEnabled</code></a>
        : The
        <a href="/develop/xr/jetpack-xr-sdk/add-environments">environment</a>
        <a href="/reference/kotlin/androidx/xr/compose/platform/SpatialCapabilities#isPassthroughControlEnabled()"><code translate="no" dir="ltr">isPassthroughControlEnabled</code></a>
        : Whether or not the application can control the passthrough state
        <a href="/reference/kotlin/androidx/xr/compose/platform/SpatialCapabilities#isSpatialAudioEnabled()"><code translate="no" dir="ltr">isSpatialAudioEnabled</code></a>
        :
        <a href="/develop/xr/jetpack-xr-sdk/add-spatial-audio">Spatial audio</a>
      </p>
    </li>
  </ul>
  <p><strong>Known Issues</strong></p>
  <ul>
    <li>
      Currently a minSDK of 30 is required to use Jetpack Compose for XR. As a workaround you may add the following manifest entry
      <code translate="no" dir="ltr">&lt;uses-sdk tools:overrideLibrary="androidx.xr.scenecore, androidx.xr.compose"/&gt;</code>
      to be able to build and run with a minSDK of 23.
    </li>
    <li>
      Jetpack XR apps currently require requesting
      <code translate="no" dir="ltr">android.permission.SCENE_UNDERSTANDING</code>
      permission in the AndroidManifest.
    </li>
    <li>
      When an app launches directly into Full Space using the
      <code translate="no" dir="ltr">PROPERTY_XR_ACTIVITY_START_MODE</code>
      property in their manifest, Activities/Applications are initially opened in Home Space before transitioning into Full Space.
    </li>
    <li>glTFs in Volume Composables may initially flicker at the wrong location.</li>
    <li>Using a SpatialDialog in a panel that has been moved significantly will push the content in the wrong direction.</li>
  </ul>
