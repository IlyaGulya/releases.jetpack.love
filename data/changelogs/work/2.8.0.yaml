libraryId: work
groupId: androidx.work
version: 2.8.0
releaseDate: 2023-02-08
#language=html
changelogHtml: |
  <h3 id="2.8.0" data-text="Version 2.8.0" tabindex="-1">Version 2.8.0</h3>
  <p>February 8, 2023</p>
  <p>
    <code translate="no" dir="ltr">androidx.work:work-*:2.8.0</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/b6809fb97f68a2d1a861e81cd6d32800039dcb09..d697ceaa517db5c8286395e186c5c8d8f85238fd/work">Version 2.8.0 contains these commits.</a>
  </p>
  <p><strong>Important changes since 2.7.0</strong></p>
  <p><strong>New Features</strong></p>
  <ul>
    <li>
      An ability to update
      <code translate="no" dir="ltr">WorkRequests</code>
      in a non-intrusive way was added, preserving original enqueue time, chaining etc. See
      <a href="https://developer.android.com/guide/background/persistent/how-to/update-work">detailed blogpost</a>
      about this feature, as well as javadocs for
      <a href="/reference/androidx/work/WorkManager#updateWork(androidx.work.WorkRequest)"><code translate="no" dir="ltr">WorkManager.updateWork</code></a>
      and
      <a href="/reference/androidx/work/ExistingPeriodicWorkPolicy#UPDATE"><code translate="no" dir="ltr">ExistingPeriodicWorkPolicy.UPDATE</code></a>
      for more details.
    </li>
  </ul>
  <p><strong>API Changes</strong></p>
  <ul>
    <li>
      <code translate="no" dir="ltr">WorkManager.updateWork</code>
      was added to update work preserving its original enqueue time and chaining.(
      <a href="https://android-review.googlesource.com/c/platform/frameworks/support/+/2051581">I9a248</a>
      ,
      <a href="https://issuetracker.google.com/issues/219446409">b/219446409</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">ExistingPeriodicWorkPolicy.UPDATE</code>
      was added. This policy allows updating a periodic work by the name. It is similar to the existing
      <code translate="no" dir="ltr">REPLACE</code>
      , but it is less intrusive: it doesn't cancel a worker if it is currently running and it preserves enqueue time - initial delay and period are calculated from original enqueue time, rather than update time.
      <code translate="no" dir="ltr">REPLACE</code>
      was deprecated to decrease a confusion between the very similarly named
      <code translate="no" dir="ltr">REPLACE</code>
      and
      <code translate="no" dir="ltr">UPDATE</code>
      . If you still want to keep the previous semantics of
      <code translate="no" dir="ltr">REPLACE</code>
      , the newly added
      <code translate="no" dir="ltr">CANCEL_AND_REENQUEUE</code>
      , which is identical to
      <code translate="no" dir="ltr">REPLACE</code>
      , can be used. (
      <a href="https://android-review.googlesource.com/#/q/I985edc2cf7ac7c316932185f3fd0a3ca6660f2dc">I985ed</a>
      ,
      <a href="https://issuetracker.google.com/issues/219446409">b/219446409</a>
      )
    </li>
    <li>
      Added the ability to intercept scheduling exceptions providing
      <code translate="no" dir="ltr">Consumer&lt;Throwable&gt;</code>
      via
      <a href="https://developer.android.com/reference/androidx/work/Configuration.Builder#setSchedulingExceptionHandler(androidx.core.util.Consumer%3Cjava.lang.Throwable%3E)">setSchedulingExceptionHandler</a>
      )
    </li>
    <li>
      Added the ability to provide
      <code translate="no" dir="ltr">Consumer&lt;Throwable&gt;</code>
      via
      <a href="https://developer.android.com/reference/androidx/work/Configuration.Builder#setInitializationExceptionHandler(androidx.core.util.Consumer%3Cjava.lang.Throwable%3E)">setInitializationExceptionHandler</a>
      to determine if there were issues when trying to initialize WorkManager.
    </li>
    <li>
      Inline helpers for
      <code translate="no" dir="ltr">OneTimeWorkRequest</code>
      &amp;
      <code translate="no" dir="ltr">PeriodicWorkRequest</code>
      were moved from
      <code translate="no" dir="ltr">androidx.work:work-runtime-ktx</code>
      to
      <code translate="no" dir="ltr">androidx.work:work-runtime</code>
      (
      <a href="https://android-review.googlesource.com/#/q/I0010f0bc806318ad840550458d872c12ee60eae7">I0010f</a>
      ,
      <a href="https://issuetracker.google.com/issues/209145335">b/209145335</a>
      )
    </li>
    <li>
      Helper methods
      <code translate="no" dir="ltr">WorkQuery.fromIds</code>
      ,
      <code translate="no" dir="ltr">WorkQuery.fromStates</code>
      ,
      <code translate="no" dir="ltr">WorkQuery.fromUniqueWorkNames</code>
      ,
      <code translate="no" dir="ltr">WorkQuery.fromTags</code>
      were added to create
      <code translate="no" dir="ltr">WorkQuery</code>
      directly. (
      <a href="https://issuetracker.google.com/issues/199919736">b/199919736</a>
      ) (
      <a href="https://android-review.googlesource.com/#/q/If48f2ae0a5523792a9abe21279084f895abe7c53">If48f2</a>
      ,
      <a href="https://issuetracker.google.com/issues/199919736">b/199919736</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">getForegroundInfo</code>
      to
      <code translate="no" dir="ltr">Worker</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/Ic1ead06bc9cc4cf61e90526dc47dff4c1365ea4c">Ic1ead</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">RxWorker</code>
      both for RxJava 2 and RxJava 3 now has
      <code translate="no" dir="ltr">setForeground</code>
      returning
      <code translate="no" dir="ltr">Completable</code>
      that can be used instead of
      <code translate="no" dir="ltr">setForegroundInfoAsync</code>
      that returns
      <code translate="no" dir="ltr">ListenableFuture</code>
    </li>
    <li>
      <code translate="no" dir="ltr">RxWorker</code>
      both for RxJava 2 and RxJava 3 has
      <code translate="no" dir="ltr">getForegroundInfo</code>
      returning
      <code translate="no" dir="ltr">Single</code>
      that can be used instead of
      <code translate="no" dir="ltr">getForegroundInfoAsync</code>
      that returns
      <code translate="no" dir="ltr">ListenableFuture</code>
      . (
      <a href="https://issuetracker.google.com/issues/203851459">b/203851459</a>
      )
    </li>
    <li>
      Constraints can now be directly constructed rather than using
      <code translate="no" dir="ltr">Constraints.Builder</code>
      , which is convenient for Kotlin users. (
      <a href="https://android-review.googlesource.com/#/q/Idc3900488dcaae5ca6c52b706723a752425875d9">Idc390</a>
      ,
      <a href="https://issuetracker.google.com/issues/137568653">b/137568653</a>
      )
    </li>
    <li>
      Added the ability to check if
      <code translate="no" dir="ltr">WorkManager</code>
      has been initialized. Also, added a new
      <code translate="no" dir="ltr">getConfiguration()</code>
      API for library developers to get the configuration that
      <code translate="no" dir="ltr">WorkManager</code>
      was initialized with. (
      <a href="https://android-review.googlesource.com/#/q/Idc3900488dcaae5ca6c52b706723a752425875d9">I6eff3</a>
      ,
      <a href="https://issuetracker.google.com/issues/137568653">b/212300336</a>
      )
    </li>
  </ul>
  <p><strong>Bug Fixes</strong></p>
  <ul>
    <li>
      Fixed an issue with the greedy scheduler that would prevent workers from running immediately when under load. (
      <a href="https://android-review.googlesource.com/#/q/I9686ba0810e4444b41ae7d638a6b8db3943da8cb">I9686b</a>
      ,
      <a href="https://issuetracker.google.com/issues/248111307">b/248111307</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">@RequiresPermission</code>
      to APIs that require granting the
      <code translate="no" dir="ltr">POST_NOTIFICATIONS</code>
      permission on SDK 33 and above. (
      <a href="https://android-review.googlesource.com/#/q/Ie542eb66c9af6e3c3a7c59bb291c7c5879458631">Ie542e</a>
      ,
      <a href="https://issuetracker.google.com/issues/238790278">b/238790278</a>
      )
    </li>
    <li>
      Propagate cancellations in the
      <code translate="no" dir="ltr">CoroutineScope</code>
      to the
      <code translate="no" dir="ltr">ListenableFuture</code>
      when using
      <code translate="no" dir="ltr">suspendCancellableCoroutine</code>
      .
    </li>
  </ul>
