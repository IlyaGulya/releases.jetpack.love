libraryId: compose-material
groupId: androidx.compose
version: 0.1.0-dev15
releaseDate: 2020-07-22
#language=html
changelogHtml: |
  <h3 id="0.1.0-dev15" data-text="Version 0.1.0-dev15" tabindex="-1">Version 0.1.0-dev15</h3>
  <p>July 22, 2020</p>
  <p>
    <code translate="no" dir="ltr">androidx.compose.material:material:0.1.0-dev15</code>
    ,
    <code translate="no" dir="ltr">androidx.compose.material:material-icons-core:0.1.0-dev15</code>
    , and
    <code translate="no" dir="ltr">androidx.compose.material:material-icons-extended:0.1.0-dev15</code>
    are released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/9f60cc700129e30cee9df020005c317fb39d32ec/ui/ui-material">Version 0.1.0-dev15 contains these commits.</a>
  </p>
  <h4 id="dependencies_update_2" data-text="Dependencies Update" tabindex="-1">Dependencies Update</h4>
  <ul>
    <li>
      To use the
      <code translate="no" dir="ltr">0.1.0-dev15</code>
      version of Compose, you will need to update your dependencies according to the new code snippets shown above in
      <a href="#declaring_dependencies">Declaring dependencies</a>
      .
    </li>
  </ul>
  <p><strong>API Changes</strong></p>
  <ul>
    <li>
      <p>
        <code translate="no" dir="ltr">@Model</code>
        annotation is now deprecated. Use state and mutableStateOf as alternatives. This deprecation decision was reached after much careful discussion.
      </p>

      <h4 id="justification_2" data-text="Justification" tabindex="-1">Justification</h4>

      <p>Rationale includes but is not limited to:</p>

      <ul>
        <li>Reduces API surface area and concepts we need to teach</li>
        <li>More closely aligns with other comparable toolkits (Swift UI, React, Flutter)</li>
        <li>
          Reversible decision. We can always bring
          <code translate="no" dir="ltr">@Model</code>
          back later.
        </li>
        <li>
          Removes corner-case usage and difficult to answer questions about configuring
          <code translate="no" dir="ltr">@Model</code>
          as things we need to handle
        </li>
        <li>
          <code translate="no" dir="ltr">@Model</code>
          data classes, equals, hashcode, etc.
        </li>
        <li>How do I have some properties “observed” and others not?</li>
        <li>How do I specify structural vs. referential equality to be used in observation?</li>
        <li>Reduces “magic” in the system. Would reduce the likelihood of someone assuming system was smarter than it is (ie, it knowing how to diff a list)</li>
        <li>Makes the granularity of observation more intuitive.</li>
        <li>Improves refactorability from variable -&gt; property on class</li>
        <li>Potentially opens up possibilities to do hand-crafted State-specific optimizations</li>
        <li>More closely aligns with the rest of the ecosystem and reduces ambiguity towards immutable or us “embracing mutable state”</li>
      </ul>

      <h4 id="migration_notes_2" data-text="Migration Notes" tabindex="-1">Migration Notes</h4>

      <p>
        Almost all existing usages of
        <code translate="no" dir="ltr">@Model</code>
        are fairly trivially transformed in one of two ways. The example below has a
        <code translate="no" dir="ltr">@Model</code>
        class with two properties just for the sake of example, and has it being used in a composable.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-nd">@Model</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">Position</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">x</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">y</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span>
  <span class="devsite-syntax-p">)</span>

  <span class="devsite-syntax-nd">@Composable</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">Example</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">p</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">remember</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Position</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">PositionChanger</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">position</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onXChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">x</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onYChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">y</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
      <h4 id="alternative_1_use_stateoriginalclass_and_create_copies_2" data-text="Alternative 1: Use State<OriginalClass> and create copies." tabindex="-1">
        Alternative 1: Use
        <code translate="no" dir="ltr">State&lt;OriginalClass&gt;</code>
        and create copies.
      </h4>

      <p>
        This approach is made easier with Kotlin’s data classes. Essentially, make all previously
        <code translate="no" dir="ltr">var</code>
        properties into
        <code translate="no" dir="ltr">val</code>
        properties of a data class, and then use
        <code translate="no" dir="ltr">state</code>
        instead of
        <code translate="no" dir="ltr">remember</code>
        , and assign the state value to cloned copies of the original using the data class
        <code translate="no" dir="ltr">copy(...)</code>
        convenience method.
      </p>

      <p>
        It’s important to note that this approach only works when the only mutations to that class were done in the same scope that the
        <code translate="no" dir="ltr">State</code>
        instance is created. If the class is internally mutating itself outside of the scope of usage, and you are relying on the observation of that, then the next approach is the one you will want to use.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">data</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">Position</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">x</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">y</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span>
  <span class="devsite-syntax-p">)</span>

  <span class="devsite-syntax-nd">@Composable</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">Example</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">p</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">by</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">state</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Position</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">PositionChanger</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">position</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onXChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">copy</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">x</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onYChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">copy</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">y</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
      <h4 id="alternative_2_use_mutablestateof_and_property_delegates_2" data-text="Alternative 2: Use mutableStateOf and property delegates" tabindex="-1">Alternative 2: Use mutableStateOf and property delegates</h4>

      <p>
        This approach is made easier with Kotlin’s property delegates and the
        <code translate="no" dir="ltr">mutableStateOf</code>
        API which allows you to create MutableState instances outside of composition. Essentially, replace all
        <code translate="no" dir="ltr">var</code>
        properties of the original class with
        <code translate="no" dir="ltr">var</code>
        properties with
        <code translate="no" dir="ltr">mutableStateOf</code>
        as their property delegate. This has the advantage that the usage of the class will not change at all, only the internal implementation of it. The behavior is not completely identical to the original example though, as each property is now observed/subscribed to individually, so the recompositions you see after this refactor could be more narrow (a good thing).
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">Position</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">x</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">y</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kt">Int</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">x</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">by</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">mutableStateOf</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">x</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">y</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">by</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">mutableStateOf</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">y</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>

  <span class="devsite-syntax-c1">// source of Example is identical to original</span>
  <span class="devsite-syntax-nd">@Composable</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">Example</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">var</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">p</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">remember</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Position</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-m">0</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">PositionChanger</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">position</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onXChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">x</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-n">onYChange</span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">p</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">y</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nb">it</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
      <p>
        (
        <a href="https://android-review.googlesource.com/#/q/I409e8c158841eae1dd548b33f1ec80bb609cba31">I409e8</a>
        ,
        <a href="https://issuetracker.google.com/issues/152050010">b/152050010</a>
        ,
        <a href="https://issuetracker.google.com/issues/146362815">b/146362815</a>
        ,
        <a href="https://issuetracker.google.com/issues/146342522">b/146342522</a>
        ,
        <a href="https://issuetracker.google.com/issues/143413369">b/143413369</a>
        ,
        <a href="https://issuetracker.google.com/issues/135715219">b/135715219</a>
        ,
        <a href="https://issuetracker.google.com/issues/143263925">b/143263925</a>
        ,
        <a href="https://issuetracker.google.com/issues/139653744">b/139653744</a>
        )
      </p>
    </li>
    <li>
      <p>
        onFocusChange callback in text fields renamed to onFocusChanged (
        <a href="https://android-review.googlesource.com/#/q/Ida4a1a55e5a9119c3a740d28ad2e0d9126d40853">Ida4a1</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added thresholds param in stateDraggable to specify thresholds between anchors. This was used to set a 56dp threshold in bottom drawer. Also BottomDrawerLayout now uses a separate BottomDrawerState enum. (
        <a href="https://android-review.googlesource.com/#/q/I533fad3d3bf9b95f702156e321aa15a84e81819b">I533fa</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removes previously deprecated Modifier.ripple. Clickable now uses ripple as the default indication (if you have a MaterialTheme {} set in your application) so in most cases you can just use clickable and get ripple indication for free. If you need to customize the color / size / bounded parameter for the ripple, you can manually create a RippleIndication and pass it to clickable as the indication parameter. (
        <a href="https://android-review.googlesource.com/#/q/I663b2fcbdc3079343b54dcf713f5d467e39b87a5">I663b2</a>
        ,
        <a href="https://issuetracker.google.com/issues/155375067">b/155375067</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed deprecated override of FilledTextField composable (
        <a href="https://android-review.googlesource.com/#/q/I7f8f867bb10329f5b1dbadc0a512456c40f5eaef">I7f8f8</a>
        )
      </p>
    </li>
    <li>
      <p>
        Rename Button object (containing the defaults used by Button function) to ButtonConstants (
        <a href="https://android-review.googlesource.com/#/q/I7c5f7d864984502bc477c3d42896f052b25c1db3">I7c5f7</a>
        ,
        <a href="https://issuetracker.google.com/issues/159687878">b/159687878</a>
        )
      </p>
    </li>
    <li>
      <p>
        Button's content slot now behaves as Row (useful when you need to have an icon with a text, see samples on Button how to write it) (
        <a href="https://android-review.googlesource.com/#/q/I0ff10603b1a290a8f9b0c27988008572ecf0927a">I0ff10</a>
        ,
        <a href="https://issuetracker.google.com/issues/158677863">b/158677863</a>
        )
      </p>
    </li>
    <li>
      <p>
        RadioGroup and RadioGroupItem have been deprecated. Use Box with Modifier.selectable, Row and Column to make proper set of radioButton choices by your design (
        <a href="https://android-review.googlesource.com/#/q/I7f5cf83c411fe9ad21eecf211544b868bac17fb5">I7f5cf</a>
        ,
        <a href="https://issuetracker.google.com/issues/149528535">b/149528535</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added Material Outlined Textfield (
        <a href="https://android-review.googlesource.com/#/q/I1a518ccda1cb0873ceb1f0a850b2156a9709bf3a">I1a518</a>
        )
      </p>
    </li>
    <li>
      <p>
        androidx.ui.foundation.TextFieldValue and androidx.ui.input.EditorValue is deprecated. TextField, FilledTextField and CoreTextField composables that uses that type is also deprecated. Please use androidx.ui.input.TextFieldValue instead (
        <a href="https://android-review.googlesource.com/#/q/I4066d1f4d2e3e3514753aa3495680292dc55f89d">I4066d</a>
        ,
        <a href="https://issuetracker.google.com/issues/155211005">b/155211005</a>
        )
      </p>
    </li>
    <li>
      <p>
        TabRow.TabPosition not contains position in Dp, not in IntPx (
        <a href="https://android-review.googlesource.com/#/q/I34a07faef2f00f46ea6a38903d635d939bf06879">I34a07</a>
        ,
        <a href="https://issuetracker.google.com/issues/158577776">b/158577776</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of IntPx with Int. Replaced IntPxPosition with IntOffset. Replaced IntPxSize with IntSize. (
        <a href="https://android-review.googlesource.com/#/q/Ib7b44d92ce3aff86c606753f0ac5c3122b71041d">Ib7b44</a>
        )
      </p>
    </li>
    <li>
      <p>
        In order to consolidate the number of classes used to represent sizing information, standardize on usage of the Size class instead of PxSize. This provides the benefits of an inline class to leverage a long to pack 2 float values to represent width and height represented as floats. (
        <a href="https://android-review.googlesource.com/#/q/Ic019171b52d2f24d262d9c47ac964728cdc1ee8b">Ic0191</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecates Modifier.ripple. Clickable now uses ripple as the default indication (if you have a MaterialTheme {} set in your application) so in most cases you can just use clickable and get ripple indication for free. If you need to customize the color / size / bounded parameter for the ripple, you can manually create a RippleIndication and pass it to clickable as the indication parameter. (
        <a href="https://android-review.googlesource.com/#/q/I101cd0adac4e1f466f84a35c1b3f2db1e7a69472">I101cd</a>
        ,
        <a href="https://issuetracker.google.com/issues/155375067">b/155375067</a>
        )
      </p>
    </li>
    <li>
      <p>
        Scaffold API has been reworked: few parameters changed their name, added new parameters for better customization. Added getter to query sizes of Fab, TopBar and BottomBar (
        <a href="https://android-review.googlesource.com/#/q/I0e7ce733b83235d9b6970ea5f014026fe9fd1445">I0e7ce</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added the DropdownMenu component in ui-material, a Material Design menu implementation. (
        <a href="https://android-review.googlesource.com/#/q/I9bb3d43fc1bb60cd0fed933c76b9d58cc5211514">I9bb3d</a>
        )
      </p>
    </li>
    <li>
      <p>
        Allow to show/hide software keyboard manually using SoftwareKeyboardController (
        <a href="https://android-review.googlesource.com/#/q/Ifb9d6b63534b4e71121bbd983a56217da40d7978">Ifb9d6</a>
        ,
        <a href="https://issuetracker.google.com/issues/155427736">b/155427736</a>
        )
      </p>
    </li>
    <li>
      <p>
        Modifier.indication has been added to foundation package. Use it to show press/drag/other indication on your custom interactable elements (
        <a href="https://android-review.googlesource.com/#/q/I8425fc70afc4d2815f937f8514352ce831e692ae">I8425f</a>
        ,
        <a href="https://issuetracker.google.com/issues/155287131">b/155287131</a>
        )
      </p>
    </li>
    <li>
      <p>
        Consolidated CanvasScope implementations so there is now just DrawScope and ContentDrawScope Renamed CanvasScope to DrawScope. Updated DrawScope to implement Density interface and provide LayoutDirection Deleted DrawScope subclass in ContentDrawScope Painter and PainterModifier have been updated to no longer maintain an RTL property themselves as DrawScope provides this already without manually providing it (
        <a href="https://android-review.googlesource.com/#/q/I1798e4b2b325297c3b5394aa99be3db935e369b7">I1798e</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renames Emphasis.emphasize() to Emphasis.applyEmphasis() (
        <a href="https://android-review.googlesource.com/#/q/Iceebe99ae74631527855c108ca06a13da366f762">Iceebe</a>
        )
      </p>
    </li>
    <li>
      <p>
        Disabled buttons now visually follows the Material Design specification (
        <a href="https://android-review.googlesource.com/#/q/I47dcb49c2306b497f2166b621a00d8a2896795e3">I47dcb</a>
        ,
        <a href="https://issuetracker.google.com/issues/155076924">b/155076924</a>
        )
      </p>
    </li>
    <li>
      <p>
        FilledTextField gets ime action, visual transformation and keyboard type support (
        <a href="https://android-review.googlesource.com/#/q/I1f9cf5c9eecaeb6530e01bf1fe900bb21ecb0256">I1f9cf</a>
        ,
        <a href="https://issuetracker.google.com/issues/155075201">b/155075201</a>
        )
      </p>
    </li>
    <li>
      <p>
        Adds strokeWidth parameter to CircularProgressIndicator to customize the stroke size. To change the stroke size (height) of a LinearProgressIndicator, you can use Modifier.preferredHeight() or another size modifier. (
        <a href="https://android-review.googlesource.com/#/q/Icea1609a1dd22cd9becf2b0ed96830c1ea752eab">Icea16</a>
        ,
        <a href="https://issuetracker.google.com/issues/154919081">b/154919081</a>
        )
      </p>
    </li>
    <li>
      <p>
        Adds strokeWidth parameter to CircularProgressIndicator to customize the stroke size. To change the stroke size (height) of a LinearProgressIndicator, you can use Modifier.preferredHeight() or another size modifier. (
        <a href="https://android-review.googlesource.com/#/q/Icea1609a1dd22cd9becf2b0ed96830c1ea752eab">Icea16</a>
        ,
        <a href="https://issuetracker.google.com/issues/154919081">b/154919081</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added slot API for trailing and leading icons in the FilledTextField and handling of the error state (
        <a href="https://android-review.googlesource.com/#/q/Ic12e06c1c3338255dca78d409401021d5a4f6f48">Ic12e0</a>
        )
      </p>
    </li>
    <li>
      <p>
        FAB's and Extended FAB's default color has been changed to MaterialTheme.colors.secondary. (
        <a href="https://android-review.googlesource.com/#/q/I3b9b9ddcc0a8aeaf8862cc79e648e48b75ea5956">I3b9b9</a>
        ,
        <a href="https://issuetracker.google.com/issues/154118816">b/154118816</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced all nullable Color uses in API with non-nullable and use Color.Unset instead of null (
        <a href="https://android-review.googlesource.com/#/q/Iabaa7c6334857833cdb0d5958f062e2e576bd240">Iabaa7</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed EdgeInsets to InnerPadding. Renamed innerPadding parameter of Material Buttons to paddding. (
        <a href="https://android-review.googlesource.com/#/q/I66165851232da7635a34b6bb3af7ef8dc38e3e3d">I66165</a>
        )
      </p>
    </li>
    <li>
      <p>
        Slider is now stateless. Users will need to pass and update state by themselves, just like in any other control. (
        <a href="https://android-review.googlesource.com/#/q/Ia00aa9ced51252190589e47ea928a94bd3c5555a">Ia00aa</a>
        )
      </p>
    </li>
    <li>
      <p>
        StaticDrawer was removed. If you need it, use Box with material-spec'ed width instead (
        <a href="https://android-review.googlesource.com/#/q/I244a7e7878e8cf443c008464229fdeb9a3c24e0f">I244a7</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added Material Design implementation of Filled Text Field (
        <a href="https://android-review.googlesource.com/#/q/Ic75cd8de3fab1dbc253d7dd63c20ca1dda358688">Ic75cd</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added modifier param to ListItem and reordered params to promote trailing lambda body (
        <a href="https://android-review.googlesource.com/#/q/I66e21cd6fd955a11663e17d9fab863caaa67d053">I66e21</a>
        )
      </p>
    </li>
    <li>
      <p>
        Adds defaultFontFamily constructor parameter to Typography, allowing specifying the default font family that will be used for any provided TextStyles that do not have a family set. (
        <a href="https://android-review.googlesource.com/#/q/I89d07c0730ab21464824754d2f2d17770d6bbdb9">I89d07</a>
        )
      </p>
    </li>
    <li>
      <p>
        Temporarily removed Material Data Tables from the API surface. (
        <a href="https://android-review.googlesource.com/#/q/Iaea6140fa9946b81da4d0cda10d172073a4edb1c">Iaea61</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed paramaters in Divider composable (
        <a href="https://android-review.googlesource.com/#/q/Ic4373753b3d13cf17e434a645c47d0a8350610b8">Ic4373</a>
        )
      </p>
    </li>
    <li>
      <p>
        children (
        <a href="https://android-review.googlesource.com/#/q/Ia6d19fb822f29f13d774ca84777713e3b45b0cbd">Ia6d19</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removes MaterialTheme.emphasisLevels, instead use EmphasisAmbient.current to retrieve the emphasis levels (
        <a href="https://android-review.googlesource.com/#/q/Ib5e40c2d26737829a80ec16b390b125b570e5cbb">Ib5e40</a>
        )
      </p>
    </li>
    <li>
      <p>
        Shape theming system is updated according to the Material design specification. Now you can provide small, medium and large shapes to be used by most of the components (
        <a href="https://android-review.googlesource.com/#/q/Ifb4d152de62f71c6b1759c73702752673aa27c7d">Ifb4d1</a>
        )
      </p>
    </li>
    <li>
      <p>
        Changed MaterialTheme APIs such as MaterialTheme.colors(), MaterialTheme.typography() to be properties instead of functions. Remove parentheses from existing calls, no behavioral change is expected. (
        <a href="https://android-review.googlesource.com/#/q/I3565ae6a3a08d4d329a4fdcb68360fe1bbf8617c">I3565a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Refactored FloatingActionButton APIs to accept composable lambdas instead of primitives. See updated samples for usage information. (
        <a href="https://android-review.googlesource.com/#/q/I0062288bd79e894f542d53882ae125404dd29ae2">I00622</a>
        )
      </p>
    </li>
    <li>
      <p>
        add
        <code translate="no" dir="ltr">enabled</code>
        param to Checkbox, Switch and Toggleable (
        <a href="https://android-review.googlesource.com/#/q/I41c1634c860ab068308d33d7e1a0547ad79adbdb">I41c16</a>
        )
      </p>
    </li>
    <li>
      <p>
        Ripple is now a Modifier. While Clickable is not yet converted the recommended usage is
        <code translate="no" dir="ltr">Clickable(onClick = { ... }, modifier = ripple())</code>
        (
        <a href="https://android-review.googlesource.com/#/q/Ie52007f6948838a64fb25dba4dfbb7853d0e442f">Ie5200</a>
        ,
        <a href="https://issuetracker.google.com/issues/151331852">b/151331852</a>
        ,
        <a href="https://issuetracker.google.com/issues/150060763">b/150060763</a>
        )
      </p>
    </li>
    <li>
      <p>
        Surface and Card were moved from androidx.ui.material.surface to androidx.ui.material (
        <a href="https://android-review.googlesource.com/#/q/I88a6d868983cf34b5d1f79ceedf04f8f47c87c6a">I88a6d</a>
        ,
        <a href="https://issuetracker.google.com/issues/150863888">b/150863888</a>
        )
      </p>
    </li>
    <li>
      <p>
        Button, FloatingActionButton and Clickable now have a separate
        <code translate="no" dir="ltr">enabled</code>
        param. Some of the params on Button were renamed or reordered. (
        <a href="https://android-review.googlesource.com/#/q/I54b5ac613632c1cd804b756d3ad2ccb7a475a149">I54b5a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed Image to ImageAsset to better differentiate the difference between the Image data and the upcoming Image composable used to participate in layout and draw content. _Body:Created extension method on android.graphics.Bitmap, Bitmap.asImageAsset(), to create an instance of an ImageAsset useful for combining traditional Android application development with the compose framework (
        <a href="https://android-review.googlesource.com/#/q/Id5bbdf3fe1cf68750a76bb955b20e06d1f81a71e">Id5bbd</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed Snackbar API with String parameters in favour of using the overload that accepts composable lambdas. See updated samples for usage information (
        <a href="https://android-review.googlesource.com/#/q/I55f800021b13a2611b8846b31bf4ca24f34830fa">I55f80</a>
        )
      </p>
    </li>
    <li>
      <p>
        Refactored Tab APIs to accept
        <code translate="no" dir="ltr">text</code>
        and
        <code translate="no" dir="ltr">icon</code>
        lambdas, (
        <a href="https://android-review.googlesource.com/#/q/Ia057e449977c4115ae6d564fdad341562030351e">Ia057e</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added BottomNavigation component, see the docs and samples for usage information (
        <a href="https://android-review.googlesource.com/#/q/I731a0730a9e889192fc520cd3f511ec4661866dc">I731a0</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added Icon, IconButton and IconToggleButton, removing AppBarIcon. You can directly replace existing usages of AppBarIcon with IconButton, and they will now have the correct touch target. See the samples for usage information, and see Icons for the provided Material Icons you can use directly with these components. (
        <a href="https://android-review.googlesource.com/#/q/I9684914dcde197df74d11f1173d827cd902e8832">I96849</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced ButtonStyle with distinct functions and removed text (string) overload. See updated samples for usage information. (
        <a href="https://android-review.googlesource.com/#/q/If63ab32bd3f12050a2d2f4b8c0cb044bc7144a6b">If63ab</a>
        ,
        <a href="https://issuetracker.google.com/issues/146478620">b/146478620</a>
        ,
        <a href="https://issuetracker.google.com/issues/146482131">b/146482131</a>
        )
      </p>
    </li>
    <li>
      <p>
        rename
        <code translate="no" dir="ltr">Border</code>
        modifier to
        <code translate="no" dir="ltr">DrawBorder</code>
        (
        <a href="https://android-review.googlesource.com/#/q/I8ffccaa928e74efd71dcdcda550f250195f2e5d3">I8ffcc</a>
        )
      </p>
    </li>
    <li>
      <p>LayoutCoordinates no longer has a position property. The position property does not make sense when considering LayoutModifiers, rotation, or scaling. Instead, developers should use parentCoordinates and childToLocal() to calculate the transform from one LayoutCoordinate to another.</p>

      <p>
        LayoutCoordinates uses IntPxSize for the size property instead of PxSize. Layouts use integer pixel sizes for layouts, so all layout sizes should use integers and not floating point values. (
        <a href="https://android-review.googlesource.com/#/q/I9367be21c2c202c8b6ad889b50a29454773f41af">I9367b</a>
        )
      </p>
    </li>
    <li>
      <p>
        Breaking changes to the ambients API. See log and
        <code translate="no" dir="ltr">Ambient&lt;T&gt;</code>
        documentation for details (
        <a href="https://android-review.googlesource.com/#/q/I4c7eea45f2b7bf41f8a8ba75fd667c06010469a9">I4c7ee</a>
        ,
        <a href="https://issuetracker.google.com/issues/143769776">b/143769776</a>
        )
      </p>
    </li>
    <li>
      <p>
        Scaffold material component has been added. Scaffold implements (
        <a href="https://android-review.googlesource.com/#/q/I7731b4e0f0a5238176640d5a40431c5bf98185d2">I7731b</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced DrawBorder in favor of Border Modifier (
        <a href="https://android-review.googlesource.com/#/q/Id335a8c2526693f8eb9d440c8d25341029f5de89">Id335a</a>
        )
      </p>
    </li>
  </ul>
  <p><strong>Bug Fixes</strong></p>
  <ul>
    <li>
      FocusModifier is deprecated in favor of Modifier.focus, Modifier.focusRequester, Modifier.focusObserver. FocusState and FocusDetailedState are deprecated in favor of FocusState2 (
      <a href="https://android-review.googlesource.com/#/q/I469196b76ebe08130fa4df9ed297f111abddd8b1">I46919</a>
      ,
      <a href="https://issuetracker.google.com/issues/160822875">b/160822875</a>
      ,
      <a href="https://issuetracker.google.com/issues/160922136">b/160922136</a>
      )
    </li>
    <li>
      VerticalScroller and HoriziontalScroller have been deprecated. Use ScrollableColumn and ScrollableRow for build-in experience with Column/Row behaviour and parameters, or Modifier.verticalScroll and Modifier.horizontalScroll on your own element. Similarly, ScrollerPosition has been deprecated in favor of ScrollState' (
      <a href="https://android-review.googlesource.com/#/q/I400ce0e6c0e33aa865e0e49defef1eb92ac40a93">I400ce</a>
      ,
      <a href="https://issuetracker.google.com/issues/157225838">b/157225838</a>
      ,
      <a href="https://issuetracker.google.com/issues/149460415">b/149460415</a>
      ,
      <a href="https://issuetracker.google.com/issues/154105299">b/154105299</a>
      )
    </li>
    <li>
      Modifier.draggable and Modifier.scrollable APIs were reworked. DragDirection was removed in favor of Orientation. State required for scrollable has beed simplified. ScrollableState has been renamed to ScrollableController (
      <a href="https://android-review.googlesource.com/#/q/Iab63cb65002471a5173f387f7bc6720aa929f9e6">Iab63c</a>
      ,
      <a href="https://issuetracker.google.com/issues/149460415">b/149460415</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">runOnIdleCompose</code>
      renamed to
      <code translate="no" dir="ltr">runOnIdle</code>
      (
      <a href="https://android-review.googlesource.com/#/q/I836071f1c3c63d21417a531f336f8a93ca13f9ed">I83607</a>
      )
    </li>
    <li>
      Single-value semantics properties now use a calling style. For example, 'semantics { hidden = true }' is now written as: 'semantics { hidden() }'. (
      <a href="https://android-review.googlesource.com/#/q/Ic1afd12ea22c926babc9662f1804d80b33aa0cfc">Ic1afd</a>
      ,
      <a href="https://issuetracker.google.com/issues/145951226">b/145951226</a>
      ,
      <a href="https://issuetracker.google.com/issues/145955412">b/145955412</a>
      )
    </li>
    <li>
      Several testing APIs were renamed to be more intuitive. All findXYZ APIs were renamed to onNodeXYZ. All doXYZ APIs were renamed to performXYZ. (
      <a href="https://android-review.googlesource.com/#/q/I7f164b42b04196f023c4a2153d66825487998de4">I7f164</a>
      )
    </li>
    <li>
      Transition API has been changed to return a TransitionState instead of passing the TransitionState to children. This makes the API more consistent with animate() APIs. (
      <a href="https://android-review.googlesource.com/#/q/I24e38fea3bf299e47d87dc5d2b42991e03d6786c">I24e38</a>
      )
    </li>
    <li>
      An IntBounds unit class has been added, representing integer pixel bounds from layout. The API of PopupPositionProvider has been updated to use it. (
      <a href="https://android-review.googlesource.com/#/q/I0d8d03c5535c80c6808d8f9ca7a210408890e6e7">I0d8d0</a>
      ,
      <a href="https://issuetracker.google.com/issues/159596546">b/159596546</a>
      )
    </li>
    <li>
      A new optional flag useUnmergedTree was added to test finders. (
      <a href="https://android-review.googlesource.com/#/q/I2ce48556aa3b0a0c73f4a56a0d9eed63eda49160">I2ce48</a>
      )
    </li>
    <li>
      Removed obsolete size testing APIs. (
      <a href="https://android-review.googlesource.com/#/q/Iba0a086e8c88cf44684cba56766792614201ba30">Iba0a0</a>
      )
    </li>
    <li>
      Removed Shader inline class that wrapped the NativeShader expect class Renamed NativeShader to Shader. The wrapped Shader inline class did not add anything valuable to the API surface and was an inline class, so use the NativeShader class directly. (
      <a href="https://android-review.googlesource.com/#/q/I25e4db3d4f59899b6a7c59613e49ed093e76da2f">I25e4d</a>
      )
    </li>
    <li>
      Popups, Dialogs and Menus are now inheriting the contextual MaterialTheme (
      <a href="https://android-review.googlesource.com/#/q/Ia3665905218b4d12d7a9bd121a69a51569d82694">Ia3665</a>
      ,
      <a href="https://issuetracker.google.com/issues/156527485">b/156527485</a>
      )
    </li>
    <li>
      Material DropdownMenu are now scrollable. (
      <a href="https://android-review.googlesource.com/#/q/Ide6991aae11c05c5ebc6b193eede567c4fcae77e">Ide699</a>
      )
    </li>
    <li>
      Removed layout direction parameter from the measure block of the Layout() function. Layout direction is however available inside the callback through the measure scope object (
      <a href="https://android-review.googlesource.com/#/q/Ic7d9d797938e6e2a91916836e5e9688794115c22">Ic7d9d</a>
      )
    </li>
    <li>
      Use AnimationSpec instead of AnimationBuilder in the top level APIs to clarify the concept of static animation specification -Improve the transition DSL by removing the lambda requirement for creating AnimationSpecs such as tween, spring. They instead take constructor params directly. -Improve the overall ease of use of AnimationSpec opening up constructors instead of relying on builders -Change the duration and delay for KeyFrames and Tween to Int. This eliminates unnecessary type casts and method overloading (for supporting both Long and Int). (
      <a href="https://android-review.googlesource.com/#/q/Ica0b4cb42996d3d30f9b6dacdbe149c75af77341">Ica0b4</a>
      )
    </li>
    <li>
      Switch now appears in a disabled state when
      <code translate="no" dir="ltr">enabled</code>
      is set to false (
      <a href="https://android-review.googlesource.com/#/q/If46244d35274f24d3713422c8d28b5b870fb8c84">If4624</a>
      ,
      <a href="https://issuetracker.google.com/issues/155941869">b/155941869</a>
      ,
      <a href="https://issuetracker.google.com/issues/159331694">b/159331694</a>
      )
    </li>
    <li>
      Modifier.tag was renamed to Modifier.layoutId, to avoid confusion with Modifier.testTag. (
      <a href="https://android-review.googlesource.com/#/q/I995f09d0722964ad8a5708c7299e4c6f52bec1c5">I995f0</a>
      )
    </li>
    <li>
      Alignment line Int positions returned from Placeable#get(AlignmentLine) are now non-null. If the queried alignment line is missing, AlignmentLine.Unspecified will be returned. (
      <a href="https://android-review.googlesource.com/#/q/I896c5ef8a18919aa84413669341e716bf676e32e">I896c5</a>
      ,
      <a href="https://issuetracker.google.com/issues/158134875">b/158134875</a>
      )
    </li>
    <li>
      <p>Refactored Radius class to be an inline class. Removed companion creation methods in favor of function constructor with default parameter to have the radius along the y-axis match that of the mandatory x-axis radius parameter.</p>

      <p>
        Updated DrawScope.drawRoundRect to consume a single Radius parameter instead of 2 separate float values for the radius along the x and y axis (
        <a href="https://android-review.googlesource.com/#/q/I46d1b6c89a0f738304c915ce7ee52b621e10302f">I46d1b</a>
        )
      </p>
    </li>
    <li>
      <p>
        In order to consolidate the number of classes used to represent positioning information, standardize on usage of the Offset class instead of PxPosition. This provides the benefits of an inline class to leverage a long to pack 2 float values to represent x and y offsets represented as floats. (
        <a href="https://android-review.googlesource.com/#/q/I3ad983207bc37af20afac03e2cd09b4240777687">I3ad98</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters. Deleted Px class in its entirety (
        <a href="https://android-review.googlesource.com/#/q/I3ff339371abd6fb622172d060a70d12dda4822e0">I3ff33</a>
        )
      </p>
    </li>
    <li>
      <p>
        Toggleable component has been deprecated. Use Modifier.toggleable instead (
        <a href="https://android-review.googlesource.com/#/q/I35220fca0d9d11198d1158cb905cfb2586965a34">I35220</a>
        ,
        <a href="https://issuetracker.google.com/issues/157642842">b/157642842</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (
        <a href="https://android-review.googlesource.com/#/q/I086f4744d1eb51f0f31356e36991c2a8d4433059">I086f4</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (
        <a href="https://android-review.googlesource.com/#/q/Id343458210b56a9a4cdae4ef3d0f97ea79004942">Id3434</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (
        <a href="https://android-review.googlesource.com/#/q/I97a5af412d913a53e5ff575bbf685f007d25c0d6">I97a5a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Fixed onClick not being invoked for DropdonMenuItems. (
        <a href="https://android-review.googlesource.com/#/q/I3998b374f4ad047c5a24521b5d3ba928be2e3e69">I3998b</a>
        ,
        <a href="https://issuetracker.google.com/issues/157673259">b/157673259</a>
        )
      </p>
    </li>
    <li>
      <p>
        MutuallyExclusiveSetItem has been deprecated. Use Modifier.selectable instead. (
        <a href="https://android-review.googlesource.com/#/q/I02b473710e5a654427b51565c0b950392f68fcff">I02b47</a>
        ,
        <a href="https://issuetracker.google.com/issues/157642842">b/157642842</a>
        )
      </p>
    </li>
    <li>
      <p>
        TestTag is now deprecated. Use Modifier.testTag instead. (
        <a href="https://android-review.googlesource.com/#/q/If5110df5865f5933d10d54a8aacba58f8cd1c712">If5110</a>
        ,
        <a href="https://issuetracker.google.com/issues/157173105">b/157173105</a>
        )
      </p>
    </li>
    <li>
      <p>
        TextField's cursor has a blinking animation (
        <a href="https://android-review.googlesource.com/#/q/Id10a71f42f66fae532cca35ec132bcc35a4bc660">Id10a7</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (
        <a href="https://android-review.googlesource.com/#/q/I19d02beca10c30e9b6b444be0c2dd21227e30e9c">I19d02</a>
        )
      </p>
    </li>
    <li>
      <p>
        VerticalScroller now provides Column out of the box. HorizontalScroller now provides Row out of the box. (
        <a href="https://android-review.googlesource.com/#/q/Ieca5d185b9f6e950a7175b9daa7a9a511a439da2">Ieca5d</a>
        ,
        <a href="https://issuetracker.google.com/issues/157020670">b/157020670</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (
        <a href="https://android-review.googlesource.com/#/q/Iede0b310a8a8f4a39ba6ae4a99c753f7f590d8ed">Iede0b</a>
        )
      </p>
    </li>
    <li>
      <p>
        Modifier.semantics has been undeprecated to allow usages for high level components. (
        <a href="https://android-review.googlesource.com/#/q/I4cfdc837d5ac2d240af5a5ac6b755aebf800af15">I4cfdc</a>
        )
      </p>
    </li>
    <li>
      <p>
        DrawLayer modifiers api has been changed: outlineShape renamed to shape and has the RectangleShape default value and now non-nullable; clipToOutline renamed to clip; clipToBounds removed as it is the same as clip == true with RectangleShape (
        <a href="https://android-review.googlesource.com/#/q/I7ef1155f6a1d93c41a98411f9e4632c4e18956e1">I7ef11</a>
        ,
        <a href="https://issuetracker.google.com/issues/155075735">b/155075735</a>
        )
      </p>
    </li>
    <li>
      <p>
        Updated higher level compose APIs that expose a Canvas to expose CanvasScope instead. This removes the need for consumers to maintain their own Paint objects. For consumers that still require access to a Canvas they can use the drawCanvas extension method which provides a callback to issue drawing commands with the underlying Canvas. (
        <a href="https://android-review.googlesource.com/#/q/I80afdf4c0a648962aa6ef1efc05b1d3b65757094">I80afd</a>
        )
      </p>
    </li>
    <li>
      <p>
        AlignmentLineOffset composable is deprecated, please use relativePaddingFrom() modifier instead. CenterAlignmentLine composable is removed. (
        <a href="https://android-review.googlesource.com/#/q/I601076f5ba044b176e07115a1916cdee71083163">I60107</a>
        )
      </p>
    </li>
    <li>
      <p>
        WithConstraints trailing lambda API has been changed. Now instead of two params it has a receiver scope which in addition to constraints and layoutDirection provides minWidth, maxWidth, minHeight and maxHeight properties in Dp (
        <a href="https://android-review.googlesource.com/#/q/I91b9af740cd2613ddd4fe6d63cd539a46b52fc52">I91b9a</a>
        ,
        <a href="https://issuetracker.google.com/issues/149979702">b/149979702</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added defaultMinSizeConstraints layout modifier, which sets size constraints to the wrapped layout only when the incoming corresponding constraints are unspecified (0 for min constraints and infinity for max constraints). (
        <a href="https://android-review.googlesource.com/#/q/I311eaf525d05eea9f657f583da7fdf845ad8d64f">I311ea</a>
        ,
        <a href="https://issuetracker.google.com/issues/150460257">b/150460257</a>
        )
      </p>
    </li>
    <li>
      <p>
        FocusManagerAmbient is removed. Use FocusModifier.requestFocus to obtain focus. (
        <a href="https://android-review.googlesource.com/#/q/Ic482662c18a1cb41f097a1e0bcc114d517b756b7">Ic4826</a>
        )
      </p>
    </li>
    <li>
      <p>Created CanvasScope API that wraps a Canvas object to expose a stateless, declarative drawing API surface. Transformations are contained within their own receiver scope and sizing information is also scoped to corresponding inset bounds. It does not require a consumer to maintain its own Paint state object for configuring drawing operations.</p>

      <p>
        Added CanvasScopeSample as well as updated the demo app to include a declarative graphics demo (
        <a href="https://android-review.googlesource.com/#/q/Ifd86d39ef5807d34cc06d06854d24330e5e00164">Ifd86d</a>
        )
      </p>
    </li>
    <li>
      <p>
        Add cursor color customisation to the TextField (
        <a href="https://android-review.googlesource.com/#/q/I6e33fa47950cddb5d3631528cd954c48a3f255d2">I6e33f</a>
        )
      </p>
    </li>
    <li>
      <p>
        TextFieldValue used with TextField can now be survive activity recreation when used like this:
        <code translate="no" dir="ltr">var text by savedInstanceState(saver = TextFieldValue.Saver) { TextFieldValue() }</code>
        (
        <a href="https://android-review.googlesource.com/#/q/I5c3cee62fa592dd00c1595efc6ea950b8aeda676">I5c3ce</a>
        ,
        <a href="https://issuetracker.google.com/issues/155075724">b/155075724</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed LayoutModifier2 to LayoutModifier. (
        <a href="https://android-review.googlesource.com/#/q/Id29f36d6b19674d189abb198a7656562b3b310b5">Id29f3</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed deprecated LayoutModifier interface. (
        <a href="https://android-review.googlesource.com/#/q/I2a9d6a9840072d5cb92e68155be2d07de8411d04">I2a9d6</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced CoreTextField/TextField focusIdentifier parameter with FocusNode in order to integrate with focus subsystem. (
        <a href="https://android-review.googlesource.com/#/q/I7ea4842b2acff06658b0731c55c877301b524757">I7ea48</a>
        )
      </p>
    </li>
    <li>
      <p>
        Intrinsic measurements functions in Layout and LayoutModifier2 have an IntrinsicMeasureScope receiver now which provides intrinsics query API with implicitly propagated layout direction. (
        <a href="https://android-review.googlesource.com/#/q/Id9945cb41842df9f99132679b5b68a0f0edda53d">Id9945</a>
        )
      </p>
    </li>
    <li>
      <p>
        New Modifier.zIndex() is added to control the drawing order of the children within the same parent layout. elevation property on DrawLayerModifier is renamed to shadowElevation and doesn't control the drawing order anymore. The params order fo DrawShadow is changed: elevation is now the first one and the shape is the second one with a RectangleShape default. (
        <a href="https://android-review.googlesource.com/#/q/I201506a33a55a4c48a4dbb6fe4e580824410588f">I20150</a>
        ,
        <a href="https://issuetracker.google.com/issues/152417501">b/152417501</a>
        )
      </p>
    </li>
    <li>
      <p>
        RectangleShape moved from androidx.ui.foundation.shape.* to androidx.ui.graphics.* (
        <a href="https://android-review.googlesource.com/#/q/Ia74d5a3bbe2ee3a28bbddb57a2aef2607679d4ac">Ia74d5</a>
        ,
        <a href="https://issuetracker.google.com/issues/154507984">b/154507984</a>
        )
      </p>
    </li>
    <li>
      <p>
        TextField API update - merged onFocus and onBlur callbacks into a single onFocusChange(Boolean) callback with parameter (
        <a href="https://android-review.googlesource.com/#/q/I66cd3b14d1df6bfbaafc25e501995368d69138ec">I66cd3</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added verticalGravity and horizontalGravity parameters to Row and Column, respectively. (
        <a href="https://android-review.googlesource.com/#/q/I7dc5a4e757370075657be68e6eda68e7498228fa">I7dc5a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Updated wrapContentWidth and wrapContentHeight to expect vertical or horizontal Alignment rather than any Alignment. The gravity modifier was updated to accept vertical or horizontal Alignment. Row, Column and Stack were updated to support custom continuous Alignments. (
        <a href="https://android-review.googlesource.com/#/q/Ib07281752fa9806a13e61823e00accb26f99c1f6">Ib0728</a>
        )
      </p>
    </li>
    <li>
      <p>
        Created PixelMap API to support querying pixel information from an ImageAsset. (
        <a href="https://android-review.googlesource.com/#/q/I69ad6c9a12ceed74ef6e4cf10786da309baa5580">I69ad6</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removes ProvideContentColor, instead just use ContentColorAmbient directly with
        <code translate="no" dir="ltr">Providers</code>
        (
        <a href="https://android-review.googlesource.com/#/q/Iee94234bfe6f820445b3d3d986895b293271753e">Iee942</a>
        )
      </p>
    </li>
    <li>
      <p>
        ui-text-compose module is renamed as ui-text. ui-text now contains CoreText and CoreTextField composables (
        <a href="https://android-review.googlesource.com/#/q/Ib7d4743369dbffbac262251b25d3c4351387fb36">Ib7d47</a>
        )
      </p>
    </li>
    <li>
      <p>
        ui-text module is renamed as ui-text-core (
        <a href="https://android-review.googlesource.com/#/q/I57dec72ca50e7288e37c9272ef6ce8bcc485a83e">I57dec</a>
        )
      </p>
    </li>
    <li>
      <p>
        Moved ui-framework/CoreText, CoreTextField composables under ui-text-compose. You might want to include ui-text-compose in your project. (
        <a href="https://android-review.googlesource.com/#/q/I32042a9c701b1ea3ec4f92c02811c248af6ddb84">I32042</a>
        )
      </p>
    </li>
    <li>
      <p>Improve DrawModifier API:</p>

      <ul>
        <li>Made the receiver scope for draw() ContentDrawScope</li>
        <li>Removed all parameters on draw()</li>
        <li>DrawScope has same interface as former CanvasScope</li>
        <li>
          ContentDrawScope has drawContent() method (
          <a href="https://android-review.googlesource.com/#/q/Ibaced5feb8778510b8fe78e96f4fd3da1a6fda50">Ibaced</a>
          ,
          <a href="https://issuetracker.google.com/issues/152919067">b/152919067</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">runOnIdleCompose</code>
        and
        <code translate="no" dir="ltr">runOnUiThread</code>
        are now global functions instead of methods on ComposeTestRule. (
        <a href="https://android-review.googlesource.com/#/q/Icbe8fd71d52144e855ccb4ce06a4677337be731a">Icbe8f</a>
        )
      </p>
    </li>
    <li>
      <p>
        [Mutable]State property delegate operators moved to extensions to support Kotlin 1.4 property delegate optimizations. Callers must add imports to continue using
        <code translate="no" dir="ltr">by state { ... }</code>
        or
        <code translate="no" dir="ltr">by mutableStateOf(...)</code>
        . (
        <a href="https://android-review.googlesource.com/#/q/I5312cf7bdfa072cadc1be2de5d5f45ec53200f41">I5312c</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added positionInParent and boundsInParent for LayoutCoordinates. (
        <a href="https://android-review.googlesource.com/#/q/Icacdd0909bc434cd5fd935c46e0a07b965c6a38d">Icacdd</a>
        ,
        <a href="https://issuetracker.google.com/issues/152735784">b/152735784</a>
        )
      </p>
    </li>
    <li>
      <p>
        ColoredRect has been deprecated. Use Box(Modifier.preferredSize(width, height).drawBackground(color)) instead. (
        <a href="https://android-review.googlesource.com/#/q/I499fa26b66b128943500fbdf9ba490d754adf561">I499fa</a>
        ,
        <a href="https://issuetracker.google.com/issues/152753731">b/152753731</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed LayoutResult to MeasureResult. (
        <a href="https://android-review.googlesource.com/#/q/Id8c686b5f08d58e8e48d015ed42570e306687882">Id8c68</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added LayoutModifier2, a new API for defining layout modifiers; deprecated LayoutModifier (
        <a href="https://android-review.googlesource.com/#/q/If32acbfac08c677b80f9e4d5f624fe15c95ac60d">If32ac</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced Modifier plus operator with factory extension functions (
        <a href="https://android-review.googlesource.com/#/q/I225e444f50956d84e15ca4f1378b7f805d54e0ca">I225e4</a>
        )
      </p>
    </li>
    <li>
      <p>
        Draggable has been moved to modifier (
        <a href="https://android-review.googlesource.com/#/q/Id9b16db6942de069e8d2221f192525b3bc71ab7d">Id9b16</a>
        ,
        <a href="https://issuetracker.google.com/issues/151959544">b/151959544</a>
        )
      </p>
    </li>
    <li>
      <p>
        ParentData composable is deprecated. You should either create a modifier which implements ParentDataModifier interface, or use LayoutTag modifier if you simply need to tag layout children to recognize them inside the measure block. (
        <a href="https://android-review.googlesource.com/#/q/I51368a2cb132318f5466949297e5fa247c04d68a">I51368</a>
        ,
        <a href="https://issuetracker.google.com/issues/150953183">b/150953183</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecated Center composable. It should be replaced either with the LayoutSize.Fill + LayoutAlign.Center modifier, or with one of the Box or Stack composables with suitable modifiers applied (
        <a href="https://android-review.googlesource.com/#/q/Idf5e0d25a2a8764489d738f6fcf242eeb667e124">Idf5e0</a>
        )
      </p>
    </li>
    <li>
      <p>Added VectorPainter API to replace existing subcomposition API for vector graphics. Result of subcomposition is a VectorPainter object instead of a DrawModifier. Deprecated previous DrawVector composables in favor of VectorPainter.</p>

      <p>
        Renamed Image(Painter) API to PaintBox(Painter) Created Vector composable that behaves like the Image composable except with a VectorAsset instead of an ImageAsset (
        <a href="https://android-review.googlesource.com/#/q/I9af9a365eb744e0cdb343cf424f4df5160d6c2b4">I9af9a</a>
        ,
        <a href="https://issuetracker.google.com/issues/149030271">b/149030271</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed LayoutFlexible to LayoutWeight. Renamed tight parameter to fill. (
        <a href="https://android-review.googlesource.com/#/q/If4738c70c381e149ded400d657b5efd888ae5891">If4738</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed RepaintBoundary in favor of DrawLayerModifier (
        <a href="https://android-review.googlesource.com/#/q/I00aa4667ebe6248500b677b07d08744d5f79ae7f">I00aa4</a>
        )
      </p>
    </li>
    <li>
      <p>
        DrawVector has been changed from a regular composable function to returning a Modifier drawVector() that will draw the vector as a background to a layout. (
        <a href="https://android-review.googlesource.com/#/q/I7b8e04d9eae7619211748b92658b31bc09e9b2a0">I7b8e0</a>
        )
      </p>
    </li>
    <li>
      <p>
        The Opacity composable function has been replaced with the drawOpacity modifier. (
        <a href="https://android-review.googlesource.com/#/q/I5fb62404e20e3f2a0fa94ad0fb121f35d05bbb1c">I5fb62</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replace composable function Clip with modifier drawClip(). DrawClipToBounds is a convenient modifier to use when you only need to clip to the layer bounds with a rectangle shape. (
        <a href="https://android-review.googlesource.com/#/q/If28eb34fe98927dcb8d87f8961657cb8317371ae">If28eb</a>
        )
      </p>
    </li>
    <li>
      <p>
        Replaced DrawShadow composable function with drawShadow() modifier. Shadows are now drawn as part of LayerModifier. (
        <a href="https://android-review.googlesource.com/#/q/I0317ac63ddafcf16bd2e24662d489aacb4bb6a7e">I0317a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added LayerModifier, a modifier that allows adding a RenderNode for a Layout. It allows setting clipping, opacity, rotation, scaling, and shadows. This will replace RepaintBoundary. (
        <a href="https://android-review.googlesource.com/#/q/I7100dfe7a795567a48c2d5b3094e3dbd47e0f9c7">I7100d</a>
        ,
        <a href="https://issuetracker.google.com/issues/150774014">b/150774014</a>
        )
      </p>
    </li>
    <li>
      <p>
        androidx.compose.ViewComposer has been moved to androidx.ui.node.UiComposer androidx.compose.Emittable has been removed. It was redundant with ComponentNode. androidx.compose.ViewAdapters has been removed. They are no longer a supported use case. Compose.composeInto has been deprecated. Use
        <code translate="no" dir="ltr">setContent</code>
        or
        <code translate="no" dir="ltr">setViewContent</code>
        instead. Compose.disposeComposition has been deprecated. Use the
        <code translate="no" dir="ltr">dispose</code>
        method on the
        <code translate="no" dir="ltr">Composition</code>
        returned by
        <code translate="no" dir="ltr">setContent</code>
        instead. androidx.compose.Compose.subcomposeInto has moved to androidx.ui.core.subcomposeInto ComponentNode#emitInsertAt has been renamed to ComponentNode#insertAt ComponentNode#emitRemoveAt has been renamed to ComponentNode#removeAt ComponentNode#emitMode has been renamed to ComponentNode#move (
        <a href="https://android-review.googlesource.com/#/q/Idef00fba3a2e67d7034e31d580d69192e9018b5f">Idef00</a>
        )
      </p>
    </li>
    <li>
      <p>
        Created Image composable to handle sizing/layout in addition to drawing a given ImageAsset to the screen. This composable also supports drawing any arbitrary Painter instance respecting its intrinsic size as well as supporting a given fixed size or minimum size (
        <a href="https://android-review.googlesource.com/#/q/Ibcc8f4d61cf0a0fbe697055ee2b6bfe8568755ed">Ibcc8f</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecated Wrap composable. It can be replaced either with the LayoutAlign modifier or with the Stack composable (
        <a href="https://android-review.googlesource.com/#/q/Ib237f0f8f8cedd87c35683e5cc1b69abfd13d111">Ib237f</a>
        )
      </p>
    </li>
    <li>
      <p>
        WithConstraints got LayoutDirection parameter (
        <a href="https://android-review.googlesource.com/#/q/I6d6f7d5fd9a4a0428e3ee188a9a3790e1cdaf083">I6d6f7</a>
        )
      </p>
    </li>
    <li>
      <p>
        Made the layout direction be propagated from parent layout node to children. Added layout direction modifier. (
        <a href="https://android-review.googlesource.com/#/q/I3d9559ddec464850d22466793975b41757e0224e">I3d955</a>
        )
      </p>
    </li>
    <li>
      <aside class="deprecated">
        <strong>Deprecated:</strong>
        <span>
          Draw composable is a common source of bugs as it's (
          <a href="https://android-review.googlesource.com/#/q/I78392f01c2d37c2419812478d96417a1b8a1293d">I78392</a>
          ,
          <a href="https://issuetracker.google.com/issues/149827027">b/149827027</a>
          )
        </span>
      </aside>
    </li>
    <li>
      <p>
        Stack component supports right-to-left directionality (
        <a href="https://android-review.googlesource.com/#/q/Ic9e00dfc5b8c16ff305c14bc38de38cdf72d4cf5">Ic9e00</a>
        )
      </p>
    </li>
    <li>
      <p>
        DrawShape composable was removed. Use DrawBackground modifier instead. (
        <a href="https://android-review.googlesource.com/#/q/I7ceb270c8571b3cb1cdc8b0494d90c985f61b3d7">I7ceb2</a>
        )
      </p>
    </li>
    <li>
      <p>
        Support right-to-left direction in LayoutPadding modifier (
        <a href="https://android-review.googlesource.com/#/q/I9e8da0bfbb135ff7f34b0dc49b905f634ad7d18c">I9e8da</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added AdapterList, a scrolling list component that only composes and lays out the visible items. Currently known issues include that it is vertical-only and does not fully handle all cases of changes to its children. (
        <a href="https://android-review.googlesource.com/#/q/Ib351be89aabb59dac29806a935e377e90a2da9c2">Ib351b</a>
        )
      </p>
    </li>
    <li>
      <p>
        Updated the
        <code translate="no" dir="ltr">ComposeFlags.COMPOSER_PARAM</code>
        flag to be
        <code translate="no" dir="ltr">true</code>
        , which will change the code generation strategy for the compose plugin. At a high level, this causes @Composable functions to be generated with an additional synthetic parameter, which is passed through to subsequent @Composable calls in order for the runtime to properly manage execution. This is a significant binary breaking change, however, should preserve source-level compatibility in all sanctioned usage of compose. (
        <a href="https://android-review.googlesource.com/#/q/I7971ca1b6525440c38643953645fa388131e31f0">I7971c</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added Canvas component. This composable takes up some size (provided by user) and allows you to draw using CanvasScope (
        <a href="https://android-review.googlesource.com/#/q/I0d62259da4f70e68e57ed1b20cdc9b9aa3d8b1be">I0d622</a>
        )
      </p>
    </li>
    <li>
      <p>
        Density and DensityScope were merged into one interface. Instead of ambientDensity() you can now use DensityAmbient.current. Instead of withDensity(density) just with(density) (
        <a href="https://android-review.googlesource.com/#/q/I11cb1f069a95f32f4ecab631f49d38dc1c071a42">I11cb1</a>
        )
      </p>
    </li>
    <li>
      <p>
        Changed LayoutCoordinates to make providedAlignmentLines a Set instead of a Map and have LayoutCoordinates implement the get() operator instead for retrieving a value. This makes it easier for modifiers to modify one or more value of the set without creating a new collection for each modifier. (
        <a href="https://android-review.googlesource.com/#/q/I0245a750ed12e822d61fa7d87c52bd708996f55d">I0245a</a>
        )
      </p>
    </li>
    <li>
      <p>
        Scrollers now exhibit native Android fling motion behavior. (
        <a href="https://android-review.googlesource.com/#/q/I922af68261f3f1e81538a98a7575603e531fc035">I922af</a>
        ,
        <a href="https://issuetracker.google.com/issues/147493715">b/147493715</a>
        )
      </p>
    </li>
    <li>
      <p>
        Improvements to the API surface of Constraints (
        <a href="https://android-review.googlesource.com/#/q/I0fd1505ae9a68c067a82eff6ab02b43080fe153c">I0fd15</a>
        )
      </p>
    </li>
  </ul>
