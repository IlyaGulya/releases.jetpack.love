libraryId: lifecycle
groupId: androidx.lifecycle
version: 2.3.0
releaseDate: 2021-02-10
#language=html
changelogHtml: |
  <h3 id="2.3.0" data-text="Version 2.3.0" tabindex="-1">Version 2.3.0</h3>
  <p>February 10, 2021</p>
  <p>
    <code translate="no" dir="ltr">androidx.lifecycle:lifecycle-*:2.3.0</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/7dcfa61622c99f7a9814edc198612f91485213c7..ab69093e69997058cb4a9e61203401169b6ee2a8/lifecycle">Version 2.3.0 contains these commits.</a>
  </p>
  <p><strong>Major changes since 2.2.0</strong></p>
  <ul>
    <li>
      <strong>
        <code translate="no" dir="ltr">SavedStateHandle</code>
        support for non-parcelable classes
      </strong>
      :
      <code translate="no" dir="ltr">SavedStateHandle</code>
      now supports lazy serialization by allowing you to call
      <code translate="no" dir="ltr">setSavedStateProvider()</code>
      for a given key, providing a
      <code translate="no" dir="ltr">SavedStateProvider</code>
      that will get a callback to
      <code translate="no" dir="ltr">saveState()</code>
      when the
      <code translate="no" dir="ltr">SavedStateHandle</code>
      is asked to save its state. See
      <a href="/topic/libraries/architecture/viewmodel-savedstate#non-parcelable">Saving non-parcelable classes</a>
      .
    </li>
    <li>
      <strong>Lifecycle Behavior Enforcement</strong>
      :
      <ul>
        <li>
          LifecycleRegistry now enforces
          <code translate="no" dir="ltr">DESTROYED</code>
          as a terminal state.
        </li>
        <li>
          <code translate="no" dir="ltr">LifecycleRegistry</code>
          now verifies that its methods are called on main thread. It was always a requirement for lifecycles of activities, fragments etc. An addition of observers from non-main threads resulted in hard to catch crashes in runtime. For
          <code translate="no" dir="ltr">LifecycleRegistry</code>
          objects that owned by your own components, you can explicitly opt out from checks by using
          <code translate="no" dir="ltr">LifecycleRegistry.createUnsafe(...)</code>
          , but then you have to ensure that a proper synchronization is in place when this
          <code translate="no" dir="ltr">LifecycleRegistry</code>
          is accessed from different threads.
        </li>
      </ul>
    </li>
    <li>
      <strong>Lifecycle State and Event Helpers</strong>
      : Added static helper methods of
      <code translate="no" dir="ltr">downFrom(State)</code>
      ,
      <code translate="no" dir="ltr">downTo(State)</code>
      ,
      <code translate="no" dir="ltr">upFrom(State)</code>
      ,
      <code translate="no" dir="ltr">upTo(State)</code>
      to
      <code translate="no" dir="ltr">Lifecycle.Event</code>
      for generating the
      <code translate="no" dir="ltr">Event</code>
      given a
      <code translate="no" dir="ltr">State</code>
      and transition direction. Added the
      <code translate="no" dir="ltr">getTargetState()</code>
      method that provides the
      <code translate="no" dir="ltr">State</code>
      that the Lifecycle will transition to directly following the
      <code translate="no" dir="ltr">Event</code>
      .
    </li>
    <li>
      <strong><code translate="no" dir="ltr">withStateAtLeast</code></strong>
      : Added
      <code translate="no" dir="ltr">Lifecycle.withStateAtLeast</code>
      APIs that await a lifecycle state and run a non-suspending block of code synchronously at the point of state change, then resume with the result. These APIs differ from the existing
      <code translate="no" dir="ltr">when*</code>
      methods as they do not permit running suspending code and do not employ a custom dispatcher. (
      <a href="https://android-review.googlesource.com/1326081">aosp/1326081</a>
      )
    </li>
    <li>
      <strong>
        <code translate="no" dir="ltr">ViewTree</code>
        APIs
      </strong>
      : A new
      <code translate="no" dir="ltr">ViewTreeLifecycleOwner.get(View)</code>
      and
      <code translate="no" dir="ltr">ViewTreeViewModelStoreOwner.get(View)</code>
      API allows you to retrieve the containing
      <code translate="no" dir="ltr">LifecycleOwner</code>
      and
      <code translate="no" dir="ltr">ViewModelStoreOwner</code>
      , respectively, given a
      <code translate="no" dir="ltr">View</code>
      instance. You must upgrade to
      <a href="/jetpack/androidx/releases/activity#1.2.0">
        Activity
        <code translate="no" dir="ltr">1.2.0</code>
      </a>
      and
      <a href="/jetpack/androidx/releases/fragment#1.3.0">
        Fragment
        <code translate="no" dir="ltr">1.3.0</code>
      </a>
      , and
      <a href="/jetpack/androidx/releases/appcompat:1.3.0-alpha01">AppCompat 1.3.0-alpha01</a>
      or higher to populate this correctly. The
      <code translate="no" dir="ltr">findViewTreeLifecycleOwner</code>
      and
      <code translate="no" dir="ltr">findViewTreeViewModelStoreOwner</code>
      Kotlin extensions are available in
      <code translate="no" dir="ltr">lifecycle-runtime-ktx</code>
      and
      <code translate="no" dir="ltr">lifecycle-viewmodel-ktx</code>
      , respectively.
    </li>
    <li>
      <strong>
        <code translate="no" dir="ltr">LiveData.observe()</code>
        Kotlin extension deprecation
      </strong>
      : The
      <code translate="no" dir="ltr">LiveData.observe()</code>
      Kotlin extension necessary to use lambda syntax is now deprecated as it is not necessary when using Kotlin 1.4.
    </li>
  </ul>
