libraryId: lifecycle
groupId: androidx.lifecycle
version: 2.5.0
releaseDate: 2022-06-29
#language=html
changelogHtml: |
  <h3 id="2.5.0" data-text="Version 2.5.0" tabindex="-1">Version 2.5.0</h3>
  <p>June 29, 2022</p>
  <p>
    <code translate="no" dir="ltr">androidx.lifecycle:lifecycle-*:2.5.0</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/414e5d56fe642e82b7a9926e3219cbd756e8c9af..74552ec00140b723c6c5b0253200a99d41cb3019/lifecycle">Version 2.5.0 contains these commits.</a>
  </p>
  <p><strong>Important changes since 2.4.0</strong></p>
  <ul>
    <li>
      <p>
        <code translate="no" dir="ltr">SavedStateHandle</code>
        now offers a
        <code translate="no" dir="ltr">getStateFlow()</code>
        API that returns a
        <a href="/kotlin/flow/stateflow-and-sharedflow#stateflow">
          Kotlin
          <code translate="no" dir="ltr">StateFlow</code>
        </a>
        for monitoring value changes as an alternative to using
        <code translate="no" dir="ltr">LiveData</code>
        .
      </p>
    </li>
    <li>
      <p>
        <strong>ViewModel CreationExtras</strong>
        - when writing a custom
        <code translate="no" dir="ltr">ViewModelProvider.Factory</code>
        , it is no longer required to extend
        <code translate="no" dir="ltr">AndroidViewModelFactory</code>
        or
        <code translate="no" dir="ltr">AbstractSavedStateViewModelFactory</code>
        to gain access to an
        <code translate="no" dir="ltr">Application</code>
        or
        <code translate="no" dir="ltr">SavedStateHandle</code>
        , respectively. Instead, these fields are provided to
        <strong>every</strong>
        <code translate="no" dir="ltr">ViewModelProvider.Factory</code>
        subclass as
        <code translate="no" dir="ltr">CreationExtras</code>
        via the new overload of
        <code translate="no" dir="ltr">create</code>
        :
        <code translate="no" dir="ltr">create(Class&lt;T&gt;, CreationExtras)</code>
        . These extras are provided automatically by your Activity or Fragment when using
        <a href="/jetpack/androidx/releases/activity#1.5.0">
          Activity
          <code translate="no" dir="ltr">1.5.0</code>
        </a>
        and
        <a href="/jetpack/androidx/releases/fragment#1.5.0">
          Fragment
          <code translate="no" dir="ltr">1.5.0</code>
        </a>
        , respectively.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">CustomFactory</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewModelProvider</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">Factory</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">override</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span>&lt;<span class="devsite-syntax-nf">T</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewModel</span>&gt;<span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">create</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">modelClass</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Class&lt;T&gt;</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">extras</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CreationExtras</span><span class="devsite-syntax-p">):</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">T</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-k">return</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">when</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">modelClass</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-n">HomeViewModel</span><span class="devsite-syntax-o">::</span><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-err">-&gt; {</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-c1">// Get the Application object from extras</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">application</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">checkNotNull</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">extras</span><span class="devsite-syntax-o">[</span><span class="devsite-syntax-n">ViewModelProvider</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">AndroidViewModelFactory</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">APPLICATION_KEY</span><span class="devsite-syntax-o">]</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-c1">// Pass it directly to HomeViewModel</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-n">HomeViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">application</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-n">DetailViewModel</span><span class="devsite-syntax-o">::</span><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-err">-&gt; {</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-c1">// Create a SavedStateHandle for this ViewModel from extras</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">savedStateHandle</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">extras</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">createSavedStateHandle</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">                </span><span class="devsite-syntax-n">DetailViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">savedStateHandle</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">            </span><span class="devsite-syntax-k">else</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">-</span>&gt;<span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">throw</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">IllegalArgumentException</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-s">"Unknown class </span><span class="devsite-syntax-si">$</span><span class="devsite-syntax-n">modelClass</span><span class="devsite-syntax-s">"</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-p">}</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">as</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">T</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">lifecycle-viewmodel</code>
        now provides a
        <code translate="no" dir="ltr">viewModelFactory</code>
        Kotlin DSL that allows you define your
        <code translate="no" dir="ltr">ViewModelProvider.Factory</code>
        in terms of one or more lambda initializers, one for each particular
        <code translate="no" dir="ltr">ViewModel</code>
        class your custom factory supports, using
        <code translate="no" dir="ltr">CreationExtras</code>
        as the primary data source.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">customFactory</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModelFactory</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-c1">// The return type of the lambda automatically sets what class this lambda handles</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">initializer</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-c1">// Get the Application object from extras provided to the lambda</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">application</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">checkNotNull</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-k">get</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">ViewModelProvider</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">AndroidViewModelFactory</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">APPLICATION_KEY</span><span class="devsite-syntax-p">))</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-n">HomeViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">application</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">initializer</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">savedStateHandle</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">createSavedStateHandle</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-n">DetailViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">savedStateHandle</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">lifecycle-viewmodel-compose</code>
        now offers a
        <code translate="no" dir="ltr">viewModel()</code>
        API that takes a lambda factory for creating a
        <code translate="no" dir="ltr">ViewModel</code>
        instance without requiring the creation of a custom
        <code translate="no" dir="ltr">ViewModelProvider.Factory</code>
        .
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-c1">// Within a @Composable, you can now skip writing a custom Factory</span>
  <span class="devsite-syntax-c1">// and instead write a lambda to do the initialization of your ViewModel</span>
  <span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">detailViewModel</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// This lambda is only called the first time the ViewModel is created</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// and all CreationExtras are available inside the lambda</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">savedStateHandle</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">createSavedStateHandle</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">DetailViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">savedStateHandle</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        <strong>SavedStateHandle Compose Saver Integration</strong>
        - the
        <code translate="no" dir="ltr">lifecycle-viewmodel-compose</code>
        artifact now contains new experimental APIs in
        <code translate="no" dir="ltr">SavedStateHandle.saveable</code>
        that allow
        <code translate="no" dir="ltr">rememberSaveable</code>
        like behavior backed by the
        <code translate="no" dir="ltr">SavedStateHandle</code>
        of a `ViewModel.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">ListScreenViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">handle</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">SavedStateHandle</span><span class="devsite-syntax-p">):</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewModel</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-c1">// This value survives both configuration changes and process death and recreation</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">editMode</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-k">by</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">handle</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">saveable</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">mutableStateOf</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-kc">false</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        Added an
        <code translate="no" dir="ltr">addCloseable()</code>
        API and a new constructor overload that allow you to add one or more
        <code translate="no" dir="ltr">Closeable</code>
        objects to the
        <code translate="no" dir="ltr">ViewModel</code>
        that will be closed when the
        <code translate="no" dir="ltr">ViewModel</code>
        is cleared without requiring any manual work in
        <code translate="no" dir="ltr">onCleared()</code>
        .
      </p>

      <p>
        For instance, to create a coroutine scope that you can inject into a ViewModel, but control via testing, you can create a
        <code translate="no" dir="ltr">CoroutineScope</code>
        that implements
        <code translate="no" dir="ltr">Closeable</code>
        :
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">CloseableCoroutineScope</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">context</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CoroutineContext</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">SupervisorJob</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">+</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Dispatchers</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">Main</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">immediate</span>
  <span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Closeable</span><span class="devsite-syntax-p">,</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CoroutineScope</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">override</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">coroutineContext</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CoroutineContext</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">context</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">override</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">close</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">        </span><span class="devsite-syntax-n">coroutineContext</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">cancel</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">   </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
      <p>
        Which can then be used in your
        <code translate="no" dir="ltr">ViewModel</code>
        constructor while maintaining the same lifetime as
        <code translate="no" dir="ltr">viewModelScope</code>
        :
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">TestScopeViewModel</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">customScope</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CloseableCoroutineScope</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">CloseableCoroutineScope</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewModel</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">customScope</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-c1">// You can now use customScope in the same way as viewModelScope</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
      </devsite-code>
    </li>
  </ul>
  <p><strong>Behavior changes</strong></p>
  <ul>
    <li>
      Attempting to move the
      <code translate="no" dir="ltr">Lifecycle.State</code>
      from
      <code translate="no" dir="ltr">INITIALIZED</code>
      to
      <code translate="no" dir="ltr">DESTROYED</code>
      will now always throw an
      <code translate="no" dir="ltr">IllegalStateException</code>
      regardless of whether the
      <code translate="no" dir="ltr">Lifecycle</code>
      has an attached observer.
    </li>
    <li>
      <code translate="no" dir="ltr">LifecycleRegistry</code>
      will now clear their observers when they reach the
      <code translate="no" dir="ltr">DESTROYED</code>
      state.
    </li>
  </ul>
