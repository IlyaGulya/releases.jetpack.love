libraryId: lifecycle
groupId: androidx.lifecycle
version: 2.7.0
releaseDate: 2024-01-10
#language=html
changelogHtml: |
  <h3 id="2.7.0" data-text="Version 2.7.0" tabindex="-1">Version 2.7.0</h3>
  <p>January 10, 2024</p>
  <p>
    <code translate="no" dir="ltr">androidx.lifecycle:lifecycle-*:2.7.0</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/58bcc943758bd4e82932a5190d9e5cf6aaedd3e4..09469f458ee5c8201480dab80e18c923c531db9e/lifecycle">Version 2.7.0 contains these commits.</a>
  </p>
  <p><strong>Important changes since 2.6.0</strong></p>
  <ul>
    <li>
      <code translate="no" dir="ltr">TestLifecycleOwner</code>
      now includes a suspending function
      <code translate="no" dir="ltr">setCurrentState()</code>
      which ensures that the state change and all
      <code translate="no" dir="ltr">LifecycleObserver</code>
      callbacks are completed before returning. Notably, unlike setting the
      <code translate="no" dir="ltr">currentState</code>
      property directly, this does not use
      <code translate="no" dir="ltr">runBlocking</code>
      , making it safe to use within a coroutine such as one provided by
      <code translate="no" dir="ltr">runTest</code>
      .
    </li>
    <li>
      The
      <code translate="no" dir="ltr">LiveData</code>
      extensions of
      <code translate="no" dir="ltr">map</code>
      and
      <code translate="no" dir="ltr">switchMap</code>
      now mirror the behavior of
      <code translate="no" dir="ltr">distinctUntilChanged</code>
      - if the
      <code translate="no" dir="ltr">LiveData</code>
      has a
      <code translate="no" dir="ltr">value</code>
      set, the
      <code translate="no" dir="ltr">map</code>
      /
      <code translate="no" dir="ltr">switchMap</code>
      function will be
      <em>immediately</em>
      called to populate the
      <code translate="no" dir="ltr">value</code>
      of the returned
      <code translate="no" dir="ltr">LiveData</code>
      . This ensures that the initial value will be set as part of the first composition (when used with
      <code translate="no" dir="ltr">observeAsState()</code>
      ), but does not change the observation behavior - updates values from the source
      <code translate="no" dir="ltr">LiveData</code>
      will still only apply once you start observing the
      <code translate="no" dir="ltr">LiveData</code>
      .
    </li>
    <li>
      This release fixes an issue where
      <code translate="no" dir="ltr">SavedStateHandle</code>
      would not properly restore custom
      <code translate="no" dir="ltr">Parcelable</code>
      classes after process death and recreation. Due to type information that is lost by the Android framework, arrays of custom Parcelables require additional work (manually creating a typed array of the right type) and the documentation on
      <code translate="no" dir="ltr">get</code>
      ,
      <code translate="no" dir="ltr">getLiveData</code>
      , and
      <code translate="no" dir="ltr">getStateFlow</code>
      now specifically calls this limitation out.
    </li>
    <li>
      The proguard keep rules associated with
      <code translate="no" dir="ltr">LifecycleObserver</code>
      have been removed. This means that proguarded code that wishes to use APIs via reflection (such as using the long since deprecated
      <code translate="no" dir="ltr">@OnLifecycleEvent</code>
      annotation) will need to provide their own keep rules for their specific use case.
    </li>
  </ul>
  <p><strong>Lifecycle Event Observability</strong></p>
  <ul>
    <li>
      As an alternative to using a
      <code translate="no" dir="ltr">LifecycleEventObserver</code>
      , you can now observe a
      <code translate="no" dir="ltr">Flow</code>
      of
      <code translate="no" dir="ltr">Lifecycle.Event</code>
      via the
      <code translate="no" dir="ltr">Lifecycle.asFlow()</code>
      extension method.
    </li>
    <li>
      Jetpack Compose users can now use
      <code translate="no" dir="ltr">LifecycleEventEffect</code>
      to run Compose side effects based on
      <code translate="no" dir="ltr">Lifecycle.Event</code>
      .
    </li>
  </ul>
  <devsite-code>
    <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-nd">@Composable</span>
  <span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">HomeScreen</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">HomeViewModel</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">())</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">LifecycleEventEffect</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">Lifecycle</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">Event</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">ON_RESUME</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">refreshData</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// …</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
  </devsite-code>
  <ul>
    <li>
      Jetpack Compose users can use
      <code translate="no" dir="ltr">LifecycleStartEffect</code>
      and
      <code translate="no" dir="ltr">LifecycleResumeEffect</code>
      to handle
      <em>pairs</em>
      of events - started to stopped and resumed to paused, respectively. This API mirrors the one found in
      <code translate="no" dir="ltr">DisposableEffect</code>
      and is suitable for cases where the change being made when the state is going up needs to be reversed when going back down.
    </li>
  </ul>
  <devsite-code>
    <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">HomeScreen</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">HomeViewModel</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">())</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-n">LifecycleStartEffect</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">timeTracking</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">startTrackingTimeOnScreen</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-n">onStopOrDispose</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">      </span><span class="devsite-syntax-n">timeTracking</span><span class="devsite-syntax-p">.</span><span class="devsite-syntax-na">stopTrackingTimeOnScreen</span><span class="devsite-syntax-p">()</span>
  <span class="devsite-syntax-w">    </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-c1">// …</span>
  <span class="devsite-syntax-p">}</span>
  </code></pre>
  </devsite-code>
  <p>
    See
    <a href="/topic/libraries/architecture/compose#run-code">Run code on lifecycle events</a>
    for more information.
  </p>
  <p><strong>Lifecycle State Observability</strong></p>
  <ul>
    <li>
      The current
      <code translate="no" dir="ltr">Lifecycle.State</code>
      can now be observed via the
      <code translate="no" dir="ltr">Lifecycle.currentStateFlow</code>
      property, which returns a
      <code translate="no" dir="ltr">StateFlow</code>
      where the
      <code translate="no" dir="ltr">value</code>
      is the current
      <code translate="no" dir="ltr">Lifecycle.State</code>
      .
    </li>
    <li>
      Jetpack Compose users can use the
      <code translate="no" dir="ltr">Lifecycle.currentStateAsState()</code>
      extension to directly expose
      <code translate="no" dir="ltr">Lifecycle.State</code>
      as Compose
      <code translate="no" dir="ltr">State</code>
      . This is equivalent (and a shorter alternative) to
      <code translate="no" dir="ltr">lifecycle.currentStateFlow.collectAsState()</code>
      .
    </li>
  </ul>
  <p>
    See
    <a href="/topic/libraries/architecture/compose#collect-lifecycle">Collect lifecycle state with flows</a>
    for more information.
  </p>
