libraryId: compose-foundation
groupId: androidx.compose
version: 1.9.0
releaseDate: 2025-08-13
#language=html
changelogHtml: |
  <h3 id="1.9.0" data-text="Version 1.9.0" tabindex="-1">Version 1.9.0</h3>
  <p>August 13, 2025</p>
  <p>
    <code translate="no" dir="ltr">androidx.compose.foundation:foundation-*:1.9.0</code>
    is released. Version 1.9.0 contains
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/5735a11c1798c2f8b419dfdc02347578a6ebf870..44da9aeaf3fa617c6f81f887691b37fe901109aa/compose/foundation">these commits</a>
  </p>
  <p><strong>Important changes since 1.8.0</strong></p>
  <ul>
    <li>
      Lint checks shipped with Compose now require a minimum AGP version of 8.8.2. If you are unable to upgrade AGP, you can instead upgrade Lint on its own by using
      <code translate="no" dir="ltr">android.experimental.lint.version=8.8.2</code>
      (or a newer version) in your
      <code translate="no" dir="ltr">gradle.properties</code>
      . To run Compose lint checks inside the IDE, Android Studio Ladybug or newer is required.
    </li>
    <li>
      Breaking change:
      <code translate="no" dir="ltr">clickable</code>
      ,
      <code translate="no" dir="ltr">combinedClickable</code>
      ,
      <code translate="no" dir="ltr">selectable</code>
      ,
      <code translate="no" dir="ltr">toggleable</code>
      , and
      <code translate="no" dir="ltr">triStateToggleable</code>
      overloads without an Indication parameter now only support
      <code translate="no" dir="ltr">IndicationNodeFactory</code>
      instances provided using
      <code translate="no" dir="ltr">LocalIndication</code>
      . This change will apply when you recompile your usages of these modifiers using this version of Compose. Binary / transitive dependencies are not affected. If you are providing a deprecated Indication implementation to
      <code translate="no" dir="ltr">LocalIndication</code>
      , and using these APIs, this will introduce a crash at runtime. This behavior change is needed to enable improved performance, and allow Composable functions using these modifiers to skip during recomposition. You can use
      <code translate="no" dir="ltr">ComposeFoundationFlags.isNonComposedClickableEnabled=false</code>
      to temporarily opt-out of this behavior change, to enable upgrading Compose without being blocked on this migration. This flag will be removed after one stable release. To resolve, migrate any deprecated Indication implementations to use
      <code translate="no" dir="ltr">IndicationNodeFactory</code>
      instead. You can also use the overloads with an explicit Indication parameter - these overloads will continue to support non-
      <code translate="no" dir="ltr">IndicationNodeFactory</code>
      instances of Indication, although this is not recommended for performance reasons. (
      <a href="https://android-review.googlesource.com/#/q/I6bcdc6ff82dd6ff5ea1a97688d5a1426b719df20">I6bcdc</a>
      ,
      <a href="https://issuetracker.google.com/issues/316914333">b/316914333</a>
      )
    </li>
    <li>
      Introduced
      <code translate="no" dir="ltr">isFlingCancellationWithNestedScrollFixEnabled</code>
      to fix an issue with fling propagation in nested scrolling. In this CL we are restoring the fling continuation behavior removed in
      <a href="https://android-review.git.corp.google.com/c/platform/frameworks/support/+/3260391">I9326a</a>
      . We will still cancel the fling animation in case the child is removed from composition. (
      <a href="https://android-review.googlesource.com/#/q/I467f4a8974a752d63bd3d6ab62e6eb751f5e2ccc">I467f4</a>
      ,
      <a href="https://issuetracker.google.com/issues/405910180">b/405910180</a>
      ,
      <a href="https://issuetracker.google.com/issues/419049142">b/419049142</a>
      ,
      <a href="https://issuetracker.google.com/issues/416784125">b/416784125</a>
      )
    </li>
    <li>
      Re-add usage of
      <code translate="no" dir="ltr">scrollAnimationSpec</code>
      in
      <code translate="no" dir="ltr">ContentInViewNode</code>
      . The behavior was removed during the
      <code translate="no" dir="ltr">scrollAnimationSpec</code>
      deprecation which caused use cases to be broken. (
      <a href="https://android-review.googlesource.com/#/q/I1436a3212c8f637935259243253f70db1163e584">I1436a</a>
      ,
      <a href="https://issuetracker.google.com/issues/403301605">b/403301605</a>
      )
    </li>
    <li>
      Stabilized
      <code translate="no" dir="ltr">LazyLayout</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/If5db4170daec197e39612bcfb5f8b5d4cdd8db52">If5db4</a>
      ),
      <code translate="no" dir="ltr">LazyLayoutPrefetchState</code>
      and it's scheduling method
      <code translate="no" dir="ltr">schedulePrecomposition</code>
      and
      <code translate="no" dir="ltr">schedulePrecompositionAndPremeasure</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I4362f3417ebe652d967463a474e4ba799967930d">I4362f</a>
      ,
      <a href="https://issuetracker.google.com/issues/252853717">b/252853717</a>
      ) and
      <code translate="no" dir="ltr">LazyLayoutItemProvider</code>
      (
      <a href="https://android-review.googlesource.com/#/q/Icce09a01e2668ea0a93678ec84d189aa4769e26c">Icce09</a>
      ,
      <a href="https://issuetracker.google.com/issues/261565751">b/261565751</a>
      )
    </li>
    <li>
      Allow Compose to trigger
      <code translate="no" dir="ltr">ViewTreeObserver.OnScrollChanged</code>
      . This behavior is introduced under the flag
      <code translate="no" dir="ltr">isOnScrollChangedCallbackEnabled</code>
      . We also introduced an extension function of
      <code translate="no" dir="ltr">DelegatableNode dispatchOnScrollChanged</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I34b9d923ff1fb4a4e27a53e583a7b082bc99b158">I34b9d</a>
      ,
      <a href="https://issuetracker.google.com/issues/238109286">b/238109286</a>
      )
    </li>
    <li>
      Introduce
      <code translate="no" dir="ltr">Modifier.scrollable2D</code>
      ,
      <code translate="no" dir="ltr">Scrollable2DState</code>
      and companion APIs for state creation. Also introduced common scroll extension functions. (
      <a href="https://android-review.googlesource.com/#/q/Ic61c8f14451090f441b009bf8f86e7566c27c782">Ic61c8</a>
      ,
      <a href="https://issuetracker.google.com/issues/214410040">b/214410040</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">PrefetchScheduler</code>
      and customisation have been deprecated in favor of the internal implementation that does all the work automatically. (
      <a href="https://android-review.googlesource.com/#/q/I3a9a678918c7ce33174b9c330142a650cc9e3b2a">I3a9a6</a>
      ,
      <a href="https://issuetracker.google.com/issues/420551535">b/420551535</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">TextFieldState.edit { }</code>
      no longer clears the undo history. Instead it creates a standalone undo entry. If the desired behavior is to clear the undo stack after an edit call, please use
      <code translate="no" dir="ltr">TextFieldState.undoState.clearHistory()</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I12c14696947b577ffb42d33094b89dedb76dc34b">I12c14</a>
      )
    </li>
    <li>Context Menu and Selection toolbar now both support Smart Items (Smart Selection)</li>
    <li>
      Added styled text
      <code translate="no" dir="ltr">OutputTransformation</code>
      to allow styling the output of
      <code translate="no" dir="ltr">TextField</code>
      using the
      <code translate="no" dir="ltr">state</code>
      overload.
    </li>
    <li>
      <code translate="no" dir="ltr">TextField</code>
      : Support context menu (right click menu).
    </li>
    <li>
      Text copied from multiple Text composables in a
      <code translate="no" dir="ltr">SelectionContainer</code>
      now will have a line separator \n added between text coming from the separate Text composables. (
      <a href="https://android-review.googlesource.com/#/q/I25332168924ca35574bb8c5e7094ad8010ab5927">I25332</a>
      ,
      <a href="https://issuetracker.google.com/issues/285036739">b/285036739</a>
      )
    </li>
    <li>
      Introduce API for creating custom bullet lists through
      <code translate="no" dir="ltr">AnnotatedString</code>
      (
      <a href="https://android-review.googlesource.com/#/q/I1d066d3df73999bd3c771b72982fe8bbccc822ae">I1d066</a>
      ,
      <a href="https://issuetracker.google.com/issues/383269496">b/383269496</a>
      ,
      <a href="https://issuetracker.google.com/issues/139326648">b/139326648</a>
      )
    </li>
    <li>
      The
      <code translate="no" dir="ltr">state</code>
      overload of
      <code translate="no" dir="ltr">BasicTextField</code>
      will keep the cursor scrolled into view when its size changes. (
      <a href="https://android-review.googlesource.com/#/q/I0eb41276b627d49889d3aedb11b58ba4d2ec0b74">I0eb41</a>
      ,
      <a href="https://issuetracker.google.com/issues/406187741">b/406187741</a>
      )
    </li>
    <li>
      Breaking change: the
      <code translate="no" dir="ltr">background</code>
      and
      <code translate="no" dir="ltr">border</code>
      modifier nodes now implement
      <code translate="no" dir="ltr">SemanticsModifierNode</code>
      . This can result in new
      <code translate="no" dir="ltr">SemanticsNodes</code>
      added to the semantics tree and, therefore, lead to test failures in tests that make assumptions about the semantics tree structure. For example, tests that use
      <code translate="no" dir="ltr">onChild</code>
      ,
      <code translate="no" dir="ltr">onParent</code>
      ,
      <code translate="no" dir="ltr">onSibling</code>
      , and other similar methods to make assertions can fail if a new node is added between the current and target nodes. The preferred way to fix these failures is to add a
      <code translate="no" dir="ltr">testTag</code>
      to the target node directly. Another approach is to use a looser matcher, such as
      <code translate="no" dir="ltr">onNode(hasAnyAncestor(hasText("ancestor")) and hasText("target"))</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I638b56cb3aa3f4f68a354dfa5a42201febee61bc">I638b5</a>
      )
    </li>
  </ul>
