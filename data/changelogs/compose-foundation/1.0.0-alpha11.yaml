libraryId: compose-foundation
groupId: androidx.compose
version: 1.0.0-alpha11
releaseDate: 2021-01-28
#language=html
changelogHtml: |
  <h3 id="1.0.0-alpha11" data-text="Version 1.0.0-alpha11" tabindex="-1">Version 1.0.0-alpha11</h3>
  <p>January 28, 2021</p>
  <p>
    <code translate="no" dir="ltr">androidx.compose.foundation:foundation:1.0.0-alpha11</code>
    and
    <code translate="no" dir="ltr">androidx.compose.foundation:foundation-layout:1.0.0-alpha11</code>
    are released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/6207afb1646d302c5d29c2c67d332b48db87fb27..6950aab50fe6c9f7e9d97cf865161f2d3999eb9e/compose/foundation">Version 1.0.0-alpha11 contains these commits.</a>
  </p>
  <p><strong>API Changes</strong></p>
  <ul>
    <li>
      <p>Deprecate non-suspend scrollBy, remove non-suspend scrollTo</p>

      <p>
        We now recommend using suspend functions to control scrolling and wait for the scroll to finish. We are deprecating and/or removing the non-suspend versions of these functions as part of this transition. (
        <a href="https://android-review.googlesource.com/#/q/Ie9cedf8bc71b54353a175699901edd92f850d02c">Ie9ced</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecate non-suspend smoothScrollBy We now recommend using suspend functions to control scrolling and wait for the scroll to finish. We are deprecating the non-suspend versions of these functions as part of this transition. (
        <a href="https://android-review.googlesource.com/#/q/I128806c8aea7f17758d1a5d953bbe40e3bcc1b18">I12880</a>
        )
      </p>
    </li>
    <li>
      <p>
        Content description parameter has been added to the Image and Icon. It is used to provide description to the accessibility services (
        <a href="https://android-review.googlesource.com/#/q/I2ac4c1058ed0bf1e5756cc6cdae546806974409e">I2ac4c</a>
        )
      </p>
    </li>
    <li>
      <p>
        BasicTextField received a new parameter called 'decorationBox'. It allows to add the decorations like icons, placeholder, label and similar to the text field and increase the hit target area of it. (
        <a href="https://android-review.googlesource.com/#/q/I169960830df82b0406ac4b6868ea544c9f848403">I16996</a>
        )
      </p>
    </li>
    <li>
      <p>
        canDrag parameter has been removed from the Modifier.draggable (
        <a href="https://android-review.googlesource.com/#/q/Ic4bec74b6fb3a9306abe4fdee7c6961ad3a62d77">Ic4bec</a>
        ,
        <a href="https://issuetracker.google.com/issues/175294473">b/175294473</a>
        )
      </p>
    </li>
    <li>
      <p>
        AnimatedFloat.fling that accepts FlingConfig has been removed. Please use suspend Animatable.animateDecay instead. (
        <a href="https://android-review.googlesource.com/#/q/I4659b606834e8325473fd672d824114b8ec20173">I4659b</a>
        ,
        <a href="https://issuetracker.google.com/issues/177457083">b/177457083</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed
        <code translate="no" dir="ltr">data class</code>
        from the following classes:
      </p>

      <ul>
        <li>InlineTextContent</li>
        <li>LocaleList</li>
        <li>
          (
          <a href="https://android-review.googlesource.com/#/q/I605c7a0e257f0a52db29f8d82ee449e4ed2c9d8e">I605c7</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        clickable, toggleable and selectable can be created outside of composition now (
        <a href="https://android-review.googlesource.com/#/q/I0a130bfa57713c96cc8b52c67becd32145526685">I0a130</a>
        ,
        <a href="https://issuetracker.google.com/issues/172938345">b/172938345</a>
        ,
        <a href="https://issuetracker.google.com/issues/175294473">b/175294473</a>
        )
      </p>
    </li>
    <li>
      <p>
        ScrollableColumn/Row were deprecated. Using ScrollableColumn is less efficient comparing to LazyColumn when you have a large scrolling content because with LazyColumn we can only compose/measure/draw visible elements. To prevent users from going inefficient way we decided to deprecate ScrollableColumn and ScrollableRow and promote usages of LazyColumn and LazyRow instead. Users can still decide they don't need the lazy behaviour and use the modifiers directly like this: Column(Modifier.verticalScroll(rememberScrollState())) (
        <a href="https://android-review.googlesource.com/#/q/Ib976b534e063a86a2c587762b786a23e32cc61b6">Ib976b</a>
        ,
        <a href="https://issuetracker.google.com/issues/170468083">b/170468083</a>
        )
      </p>
    </li>
    <li>
      <p>
        New
        <code translate="no" dir="ltr">items(count: Int)</code>
        factory method for scope of LazyColumn/LazyRow/LazyVerticalGrid.
        <code translate="no" dir="ltr">items(items: List)</code>
        and
        <code translate="no" dir="ltr">itemsIndexed(items: List)</code>
        are now extension functions so you have to manually import them when used. New extension overloads for Arrays: items(items: Array) and itemsIndexed(Array) (
        <a href="https://android-review.googlesource.com/#/q/I803fc5f25fac55855c710ff5064f11525f7b6010">I803fc</a>
        ,
        <a href="https://issuetracker.google.com/issues/175562574">b/175562574</a>
        )
      </p>
    </li>
    <li>
      <p>
        The deprecated AbsoluteArrangement was removed. (
        <a href="https://android-review.googlesource.com/#/q/Iffa9670e9c19bc92c48eadbb28783935034e835e">Iffa96</a>
        ,
        <a href="https://issuetracker.google.com/issues/177641870">b/177641870</a>
        )
      </p>
    </li>
    <li>
      <p>
        The propagateMinConstraints parameter was added to Box, for specifying whether the incoming min constraints should be passed to the content of the Box or not. Default is false. (
        <a href="https://android-review.googlesource.com/#/q/I0125bbce017b1ea8587501ace9dea02f7971c01a">I0125b</a>
        ,
        <a href="https://issuetracker.google.com/issues/152613457">b/152613457</a>
        )
      </p>
    </li>
  </ul>
  <p><strong>Bug Fixes</strong></p>
  <ul>
    <li>
      onCommit, onDispose, and onActive have been deprecated in favor of SideEffect and DisposableEffect APIs (
      <a href="https://android-review.googlesource.com/#/q/If760ec2a190c4121a35006695d953010ac22a43a">If760e</a>
      )
    </li>
    <li>
      WithConstraints was reworked as BoxWithConstraints and moved to foundation.layout. (
      <a href="https://android-review.googlesource.com/#/q/I9420b9e0fbea7ee048b23a6ef328165bbb11e8a8">I9420b</a>
      ,
      <a href="https://issuetracker.google.com/issues/173387208">b/173387208</a>
      )
    </li>
    <li>
      <p>Changes to factory functions for Font/FontFamily/Typeface</p>

      <ul>
        <li>Added factory functions that start with capital letter</li>
        <li>Deprecated previous factory functions with lowercase first letters</li>
        <li>New factory functions return the FontFamily instead of subclasses</li>
        <li>Hid constructors of the subclasses, so that they can only be constructed via factory functions.</li>
        <li>Renamed Font.asFontFamily to Font.toFontFamily</li>
        <li>
          (
          <a href="https://android-review.googlesource.com/#/q/I42aa7f9fb7e11eb708bc9e9828f65c57c6c9320b">I42aa7</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        Introduced
        <code translate="no" dir="ltr">ComposeContentTestRule</code>
        , which extends
        <code translate="no" dir="ltr">ComposeTestRule</code>
        and defines
        <code translate="no" dir="ltr">setContent</code>
        , which has been removed from
        <code translate="no" dir="ltr">ComposeTestRule</code>
        . Added a factory method
        <code translate="no" dir="ltr">createEmptyComposeRule()</code>
        that returns a
        <code translate="no" dir="ltr">ComposeTestRule</code>
        and does not launch an Activity for you. Use this when you want to launch your Activity during your test, e.g. using
        <code translate="no" dir="ltr">ActivityScenario.launch</code>
        (
        <a href="https://android-review.googlesource.com/#/q/I9d78283c27d87a3135071884e115bbd814492c47">I9d782</a>
        ,
        <a href="https://issuetracker.google.com/issues/174472899">b/174472899</a>
        )
      </p>
    </li>
    <li>
      <p>
        animateAsState is now animateFooAsState, where Foo is the type of the variable being animated. e.g. Float, Dp, Offset, etc (
        <a href="https://android-review.googlesource.com/#/q/Ie7e25c8978996334b0dcc757b07df1434ff346aa">Ie7e25</a>
        )
      </p>
    </li>
    <li>
      <p>
        Density is now receiver scope for Arrangement interfaces. (
        <a href="https://android-review.googlesource.com/#/q/I18aadb928b615b64ddd6ac41fb630e2ece470f08">I18aad</a>
        )
      </p>
    </li>
    <li>
      <p>TextFieldValue accepts AnnotatedString. However this is an API only change and multi-style text editing is not implemented yet.</p>

      <ul>
        <li>
          Removed
          <code translate="no" dir="ltr">initial</code>
          from EditingBuffer constructor parameters. (
          <a href="https://android-review.googlesource.com/#/q/I326d534a69911fdd39097cdb42e9341ee7987130">I326d5</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        invalidate and compositionReference() are now deprecated in favor of currentRecomposeScope and rememberCompositionReference respectively. (
        <a href="https://android-review.googlesource.com/#/q/I583a8efa6e3d3bc303792b825b948b3722ada103">I583a8</a>
        )
      </p>
    </li>
    <li>
      <p>
        AnnotatedString is changed to extend from kotlin.CharSequence. Therefore length and subSequence are now instance functions, and extension functions are removed. (
        <a href="https://android-review.googlesource.com/#/q/Iaf429c94da9f1867cc0815cb26933961a71cc629">Iaf429</a>
        )
      </p>
    </li>
    <li>
      <p>
        Duration and Uptime will be replace with Long milliseconds, and this step removes the dependency of pointer input on those classes. (
        <a href="https://android-review.googlesource.com/#/q/Ia33b2d6835861501019481b388cb2c99441c346c">Ia33b2</a>
        ,
        <a href="https://issuetracker.google.com/issues/175142755">b/175142755</a>
        ,
        <a href="https://issuetracker.google.com/issues/177420019">b/177420019</a>
        )
      </p>
    </li>
    <li>
      <p>RememberObserver replaces CompositionLifecycleObserver and CompositionLifecycleObserver is now deprecated.</p>

      <p>
        <code translate="no" dir="ltr">RememberObserver</code>
        is a replacement for
        <code translate="no" dir="ltr">CompositionLifecycleObserver</code>
        with modified semantics and renamed methods. Changing to the new API can be done mechanically for objects that are only remembered once which is, and continues to be, the recommended practice. However, if a reference was remembered more than once in a composition
        <code translate="no" dir="ltr">onRemembered</code>
        is called for each reference where
        <code translate="no" dir="ltr">onEnter</code>
        is only called once.
        <code translate="no" dir="ltr">onEnter</code>
        was called multiple time if the object was used in subcompositions, such as
        <code translate="no" dir="ltr">WithConstraints</code>
        and
        <code translate="no" dir="ltr">Scaffold</code>
        making the single
        <code translate="no" dir="ltr">onEnter</code>
        call guarantee unreliable and it was removed for
        <code translate="no" dir="ltr">RememberObserver</code>
        .
      </p>

      <p>
        <code translate="no" dir="ltr">RememberObserver</code>
        adds
        <code translate="no" dir="ltr">onAbandoned</code>
        which is called if the
        <code translate="no" dir="ltr">RememberObserver</code>
        instance is returned from the callback passed to
        <code translate="no" dir="ltr">remember</code>
        but was not remembered in the composition state and, therefore, will never have
        <code translate="no" dir="ltr">onRemembered</code>
        called. This can occur if an exception terminates composition before completing or the composition is discarded because the state is was producing a composition for is no longer current or otherwise is no longer needed. If the instance of
        <code translate="no" dir="ltr">RememberObserver</code>
        following the single reference recommendation above is tracking an external resource both
        <code translate="no" dir="ltr">onForgotten</code>
        and
        <code translate="no" dir="ltr">onAbandoned</code>
        each indicate that the resource is no longer needed. If the object is tracking work started or resources allocated in
        <code translate="no" dir="ltr">onRemembered</code>
        ,
        <code translate="no" dir="ltr">onAbandoned</code>
        can be ignored as it will not be called if
        <code translate="no" dir="ltr">onRemembered</code>
        is called. (
        <a href="https://android-review.googlesource.com/#/q/I02c364f517507abd6a5c071fb527192ad1d77239">I02c36</a>
        )
      </p>
    </li>
    <li>
      <p>Renamed TransformedText.transformedText to TransformedText.text</p>

      <ul>
        <li>
          TransformedText is no longer a data class (
          <a href="https://android-review.googlesource.com/#/q/Ie672ad03d475ce6a9bf21b8c74a431592b01040b">Ie672a</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>The following classes are not data classes anymore:</p>

      <ul>
        <li>AnnotatedString</li>
        <li>ParagraphStyle</li>
        <li>SpanStyle</li>
        <li>TextStyle</li>
        <li>FontWeight</li>
        <li>TextDecoration</li>
        <li>TextGeometricTransform</li>
        <li>TextIndex</li>
        <li>TextLayoutResult</li>
        <li>
          TextLayoutInput (
          <a href="https://android-review.googlesource.com/#/q/Iaff995cc24f578b5ffd397aa12a6c98b75182e80">Iaff99</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        Removed experimental monotonicFrameAnimationClockOf methods (
        <a href="https://android-review.googlesource.com/#/q/Ib753f5d3cb77dabc7727f677a73bb7da8dae5fe2">Ib753f</a>
        ,
        <a href="https://issuetracker.google.com/issues/170708374">b/170708374</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecated global coordinates methods and made new window-based coordinates methods. (
        <a href="https://android-review.googlesource.com/#/q/Iee284dee7dbc4226493feb144d446a0289b7c83e">Iee284</a>
        )
      </p>
    </li>
    <li>
      <p>Please use ImeAction.None instead of ImeAction.NoAction</p>

      <ul>
        <li>
          Please use ImeAction.Default instead of ImeAction.Unspecified (
          <a href="https://android-review.googlesource.com/#/q/Ie1bcc7bc3828c757e497b85c4dd70d37764f616f">Ie1bcc</a>
          )
        </li>
      </ul>
    </li>
    <li>
      <p>
        FocusRequester.createRefs is now marked as experimental as it might change. (
        <a href="https://android-review.googlesource.com/#/q/I2d898d56ed0ac33f5a08253509cfd811ee0e8a5d">I2d898</a>
        ,
        <a href="https://issuetracker.google.com/issues/177000821">b/177000821</a>
        )
      </p>
    </li>
    <li>
      <p>
        SemanticsPropertyReceiver.hidden was renamed to invisibleToUser and marked @ExperimentalComposeUiApi. AccessibilityRangeInfo was renamed to ProgressBarRangeInfo. stateDescriptionRange was renamed to progressBarRangeInfo. AccessibilityScrollState was renamed to ScrollAxisRange. horizontalAccessibilityScrollState was renamed to horizontalScrollAxisRange. verticalAccessibilityScrollState was renamed to verticalScrollAxisRange. (
        <a href="https://android-review.googlesource.com/#/q/Id31487aa7cbddf4d3d163999afae458cdab4dc8a">Id3148</a>
        )
      </p>
    </li>
    <li>
      <p>
        Changed VisualTransformation to be a functional interface (
        <a href="https://android-review.googlesource.com/#/q/I3bba482675b65f234f5d46676f1e70853b21c051">I3bba4</a>
        )
      </p>
    </li>
    <li>
      <p>
        Leverage TestCoroutineDispatcher in testing (
        <a href="https://android-review.googlesource.com/#/q/I532b68e37ea6f72964fdcc267e397d285cffd9ad">I532b6</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed PointerInputData and modified PointerInputChange to give it all of PointerInputData's fields. Made PointerInputEvent and PointerInputEventData internal because they aren't used in any public API. (
        <a href="https://android-review.googlesource.com/#/q/Ifff970815031482a0ac1d5dab42a6156e10154b1">Ifff97</a>
        ,
        <a href="https://issuetracker.google.com/issues/175142755">b/175142755</a>
        )
      </p>
    </li>
    <li>
      <p>
        Renamed TextInputService.onStateUpdated as updateState (
        <a href="https://android-review.googlesource.com/#/q/Id4853b777bb81a4645d1b41b5dff874322949022">Id4853</a>
        )
      </p>
    </li>
    <li>
      <p>
        Remove displaySize as it should be avoided. Typically it is better to use size of onRoot() or window size at least. (
        <a href="https://android-review.googlesource.com/#/q/I62db4535f36b09ab6f0b874c221ece0b352db962">I62db4</a>
        )
      </p>
    </li>
  </ul>
