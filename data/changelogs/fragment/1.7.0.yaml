libraryId: fragment
groupId: androidx.fragment
version: 1.7.0
releaseDate: 2024-05-01
#language=html
changelogHtml: |
  <h3 id="1.7.0" data-text="Version 1.7.0" tabindex="-1">Version 1.7.0</h3>
  <p>May 1, 2024</p>
  <p>
    <code translate="no" dir="ltr">androidx.fragment:fragment-*:1.7.0</code>
    is released. Version 1.7.0 contains
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/7c8070cb8775c270c1b0f3b4232c701cec631be4..88073d6f9c7c7dc2fc11e9ef53a94e12e4ad1495/fragment">these commits</a>
    .
  </p>
  <p><strong>Predictive Back Gesture Support</strong></p>
  <ul>
    <li>
      Fragments now provide support for Predictive in-app back when using
      <code translate="no" dir="ltr">Animator</code>
      or when using
      <a href="/jetpack/androidx/releases/transition#1.5.0">AndroidX Transition 1.5.0</a>
      . This allows users to use the back gesture to see the previous fragment by seeking your Animator/Transition before deciding to either commit the transaction via completing the gesture or canceling.
    </li>
  </ul>
  <table>
    <thead>
      <tr>
        <th>Transition System</th>
        <th>XML Resource</th>
        <th>Supports Predictive Back</th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>
          <a href="/reference/android/view/animation/Animation"><code translate="no" dir="ltr">Animation</code></a>
        </td>
        <td><code translate="no" dir="ltr">R.anim</code></td>
        <td>No</td>
      </tr>
      <tr>
        <td>
          <a href="/reference/android/animation/Animator"><code translate="no" dir="ltr">Animator</code></a>
        </td>
        <td><code translate="no" dir="ltr">R.animator</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td>
          Framework
          <a href="/reference/android/transition/Transition"><code translate="no" dir="ltr">Transition</code></a>
        </td>
        <td><code translate="no" dir="ltr">R.transition</code></td>
        <td>No</td>
      </tr>
      <tr>
        <td>
          AndroidX
          <a href="/reference/androidx/transition/Transition"><code translate="no" dir="ltr">Transition</code></a>
          with
          <a href="/jetpack/androidx/releases/transition#1.4.1">Transition 1.4.1</a>
          or less
        </td>
        <td><code translate="no" dir="ltr">R.transition</code></td>
        <td>No</td>
      </tr>
      <tr>
        <td>
          AndroidX
          <a href="/reference/androidx/transition/Transition"><code translate="no" dir="ltr">Transition</code></a>
          with
          <a href="/jetpack/androidx/releases/transition#1.5.0">Transition 1.5.0</a>
        </td>
        <td><code translate="no" dir="ltr">R.transition</code></td>
        <td>Yes</td>
      </tr>
    </tbody>
  </table>
  <p>
    If you see any issues with Predictive Back support in Fragments after youâ€™ve
    <a href="/guide/navigation/custom-back/predictive-back-gesture#opt-predictive">opted into the predictive back gesture</a>
    , please
    <a href="https://issuetracker.google.com/issues/new?component=460964">file an issue against Fragment</a>
    with a sample project that reproduces your issue. You can disable predictive back by using
    <code translate="no" dir="ltr">FragmentManager.enabledPredictiveBack(false)</code>
    in the
    <code translate="no" dir="ltr">onCreate()</code>
    of your Activity.
  </p>
  <p>
    <code translate="no" dir="ltr">FragmentManager.OnBackStackChangedListener()</code>
    now provides the
    <code translate="no" dir="ltr">onBackStackChangeProgressed()</code>
    and
    <code translate="no" dir="ltr">onBackStackChangeCancelled()</code>
    for receiving predictive back progress and canceled events respectively.
  </p>
  <p><strong>Fragment Compose Artifact</strong></p>
  <p>
    A new
    <code translate="no" dir="ltr">fragment-compose</code>
    artifact has been created that focuses on supporting apps that are in the process of moving from a Fragment based architecture to a fully Compose based architecture.
  </p>
  <p>
    The first feature available in this new artifact is a
    <code translate="no" dir="ltr">content</code>
    extension method on
    <code translate="no" dir="ltr">Fragment</code>
    that seeks to make it easier to use Compose for the UI of an individual Fragment by creating a
    <code translate="no" dir="ltr">ComposeView</code>
    for you and setting the correct
    <code translate="no" dir="ltr">ViewCompositionStrategy</code>
    .
  </p>
  <div></div>
  <devsite-code>
    <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="Kotlin"><code translate="no" dir="ltr"><span class="devsite-syntax-w">  </span><span class="devsite-syntax-kd">class</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nc">ExampleFragment</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Fragment</span><span class="devsite-syntax-p">()</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>

  <span class="devsite-syntax-w">      </span><span class="devsite-syntax-kd">override</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-kd">fun</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nf">onCreateView</span><span class="devsite-syntax-p">(</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-n">inflater</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">LayoutInflater</span><span class="devsite-syntax-p">,</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-n">container</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ViewGroup?,</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-n">savedInstanceState</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">Bundle?</span>
  <span class="devsite-syntax-w">      </span><span class="devsite-syntax-p">)</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">content</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-p">{</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-c1">// Write your @Composable content here</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-kd">val</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-nv">viewModel</span><span class="devsite-syntax-p">:</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">ExampleViewModel</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-o">=</span><span class="devsite-syntax-w"> </span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">()</span>

  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-c1">// or extract it into a separate, testable method</span>
  <span class="devsite-syntax-w">          </span><span class="devsite-syntax-n">ExampleComposable</span><span class="devsite-syntax-p">(</span><span class="devsite-syntax-n">viewModel</span><span class="devsite-syntax-p">)</span>
  <span class="devsite-syntax-w">      </span><span class="devsite-syntax-p">}</span>
  <span class="devsite-syntax-w">  </span><span class="devsite-syntax-p">}</span>
  </code></pre>
  </devsite-code>
