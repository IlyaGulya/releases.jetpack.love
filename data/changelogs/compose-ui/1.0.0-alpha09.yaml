libraryId: compose-ui
groupId: androidx.compose
version: 1.0.0-alpha09
releaseDate: 2020-12-16
#language=html
changelogHtml: |
  <h3 id="1.0.0-alpha09" data-text="Version 1.0.0-alpha09" tabindex="-1">Version 1.0.0-alpha09</h3>
  <p>December 16, 2020</p>
  <p>
    <code translate="no" dir="ltr">androidx.compose.ui:ui-*:1.0.0-alpha09</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/10b5e9fd366c1c413d5576aed50a305d300938e1..72f02c12e4709ab41ae0fea9a8a668d5267a1df8/compose/ui">Version 1.0.0-alpha09 contains these commits.</a>
  </p>
  <p><strong>API Changes</strong></p>
  <ul>
    <li>
      Deprecated KeyEvent.Alt is now removed. Use KeyEvent.isAltPressed instead. (
      <a href="https://android-review.googlesource.com/#/q/Idd695fc17bdb5080f6af112cfe040494127975f0">Idd695</a>
      )
    </li>
    <li>
      Modifier.keyInputFilter and Modifier.previewKeyInputFilter are deprecated use Modifier.onKeyEvent and Modifier.onPreviewKeyEvent instead (
      <a href="https://android-review.googlesource.com/#/q/Idbf1b0b7da9d09f4312b7599b863dc41f667594c">Idbf1b</a>
      ,
      <a href="https://issuetracker.google.com/issues/175156384">b/175156384</a>
      )
    </li>
    <li>
      Modifier.focusObserver is deprecated. Use Modifier.onFocusChanged or Modifier.onFocusEvent instead (
      <a href="https://android-review.googlesource.com/#/q/I30f17d06d60fa9b8c510ee0468464258894a467b">I30f17</a>
      ,
      <a href="https://issuetracker.google.com/issues/168511863">b/168511863</a>
      ,
      <a href="https://issuetracker.google.com/issues/168511484">b/168511484</a>
      )
    </li>
    <li>
      For suspending pointer input APIs, renamed HandlePointerInputScope to AwaitPointerEventScope and handlePointerInput() to awaitPointerEventScope(). (
      <a href="https://android-review.googlesource.com/#/q/Idf0a1b94f065e72b65361cdf616122ed7939c3e7">Idf0a1</a>
      ,
      <a href="https://issuetracker.google.com/issues/175142755">b/175142755</a>
      )
    </li>
    <li>
      Autofill API is now experimental API and requires opt-in (
      <a href="https://android-review.googlesource.com/#/q/I0a1ecfbf4ddeccaecc3cea8d2223b0a4afa60636">I0a1ec</a>
      )
    </li>
    <li>
      Adding destructuring declarations to create FocuSRequester instances (
      <a href="https://android-review.googlesource.com/#/q/I35d84e1320bec5b62bf1fb096aa95f90cfd96e9c">I35d84</a>
      ,
      <a href="https://issuetracker.google.com/issues/174817008">b/174817008</a>
      )
    </li>
    <li>
      accessibilityLabel has been renamed to contentDescription. accessibilityValue has been renamed to stateDescription. (
      <a href="https://android-review.googlesource.com/#/q/I250f2d41e139d4838b0b3706f18b56fcc4f515bd">I250f2</a>
      )
    </li>
    <li>
      Custom events were removed from suspending pointer input API (
      <a href="https://android-review.googlesource.com/#/q/Ia54d5d081b80b21bf7c84eae4a97ed757c9d11a1">Ia54d5</a>
      ,
      <a href="https://issuetracker.google.com/issues/175142755">b/175142755</a>
      )
    </li>
    <li>
      Introduced several new functions in SelectionRegistrar and also renamed onPositionChange to notifyPositionChange. (
      <a href="https://android-review.googlesource.com/#/q/Ifbaf754c0ee3f485869115bba8dbcc1a8b7f5b88">Ifbaf7</a>
      )
    </li>
    <li>
      More members of LayoutNode we marked as internal (
      <a href="https://android-review.googlesource.com/#/q/I443c65c9b4677e3947894b7836af6cb5824f7c73">I443c6</a>
      )
    </li>
    <li>
      LayoutInfo was introduced to be used by tooling and testing (
      <a href="https://android-review.googlesource.com/#/q/I9b190ff86e173fe25a044312990e8a12cb48a59c">I9b190</a>
      )
    </li>
    <li>
      AndroidOwner made internal (
      <a href="https://android-review.googlesource.com/#/q/Ibcad027dbc1794f5d202be52fe0783c73d249a25">Ibcad0</a>
      ,
      <a href="https://issuetracker.google.com/issues/170296980">b/170296980</a>
      )
    </li>
    <li>
      Removed ExperimentalPointerInput annotation (
      <a href="https://android-review.googlesource.com/#/q/Ia7a2473869400fc92ce70c802f42df9af7129386">Ia7a24</a>
      )
    </li>
    <li>
      Nested scroll system added. Refer to Modifier.nestedScroll for more details (
      <a href="https://android-review.googlesource.com/#/q/I36e1594231bddd0ab8e90bb04fd03bf930a434c5">I36e15</a>
      ,
      <a href="https://issuetracker.google.com/issues/162408885">b/162408885</a>
      )
    </li>
    <li>
      subcomposeInto(LayoutNode) was made internal (
      <a href="https://android-review.googlesource.com/#/q/Id724aebef104f6404884f1a45bee9958583b7229">Id724a</a>
      )
    </li>
    <li>
      <p>
        The
        <code translate="no" dir="ltr">Applier</code>
        interface has changed to simplify building trees bottom-up instead of top-down.
      </p>

      <p>
        The
        <code translate="no" dir="ltr">insert()</code>
        method has been renamed to
        <code translate="no" dir="ltr">insertTopDown()</code>
        .
      </p>

      <p>
        A new method,
        <code translate="no" dir="ltr">insertBottomUp()</code>
        , was added.
      </p>

      <p>
        An applier either inserts nodes into the tree it is editing using
        <code translate="no" dir="ltr">insertTopDown()</code>
        or
        <code translate="no" dir="ltr">insertBottomUp()</code>
        depending on which performs better.
      </p>

      <p>
        Some trees, such as
        <code translate="no" dir="ltr">LayoutNode</code>
        and
        <code translate="no" dir="ltr">View</code>
        , are much more efficient to build bottom-up than top-down. Prior to this change, a stack of inserts was required to implement bottom-up which needed to be copied to every applier which needed bottom-up construction for performance. With this change an
        <code translate="no" dir="ltr">Applier</code>
        overrides
        <code translate="no" dir="ltr">insertBottomUp()</code>
        to build a tree bottom-up and
        <code translate="no" dir="ltr">insertTopDown()</code>
        to build the tree top-down. (
        <a href="https://android-review.googlesource.com/#/q/Icbdc2929ab8fc8fce231d633b062fc80be5c10c9">Icbdc2</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added dismissOnBackPress and dismissOnClickOutside properties to AndroidDialogProperties. These allow configuring when the dialog's onDismissRequest lambda will be invoked. (
        <a href="https://android-review.googlesource.com/#/q/If5e175fe1866cb5b73118cb178269152bc80eea4">If5e17</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added painterResource API to handle opaquely loading Painter objects from either rasterized asset formats (like PNGs) or VectorDrawables. Consumers no longer have to determine the type of asset in advance and can call this method to get a Painter object to use in Image composables or painter modifiers. (
        <a href="https://android-review.googlesource.com/#/q/I2c703e31eedbbfcf073d28064496a6e324c2027a">I2c703</a>
        ,
        <a href="https://issuetracker.google.com/issues/173818471">b/173818471</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added Modifier.clearAndSetSemantics to clear descendants' semantics and set new ones. (
        <a href="https://android-review.googlesource.com/#/q/I277ca1b76fda44a34a2c01844b832244cb42ff7e">I277ca</a>
        )
      </p>
    </li>
    <li>
      <p>
        Moved ContentDrawScope to ui-graphics module to be with DrawScope. (
        <a href="https://android-review.googlesource.com/#/q/Iee0437fa587fbe12a3623955f5fe720d5aae551f">Iee043</a>
        ,
        <a href="https://issuetracker.google.com/issues/173832789">b/173832789</a>
        )
      </p>
    </li>
    <li>
      <p>
        Introduced PathEffect graphics API to provide different patterns to stroked shapes. Deprecated usage of NativePathEffect in favor of expect/actual implementation of PathEffect. (
        <a href="https://android-review.googlesource.com/#/q/I5e97670b4534250497dc31edab4f0001ab57f2ec">I5e976</a>
        ,
        <a href="https://issuetracker.google.com/issues/171072166">b/171072166</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added IdlingResource interfaces to Compose, as a Compose supported variant of Espresso's idling resources. They can be registered and unregistered through the ComposeTestRule (
        <a href="https://android-review.googlesource.com/#/q/I433f395067a6de6d0a4afc994e5cdb813098b9c3">I433f3</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed global (un)registration of ComposeIdlingResource and global (un)registration of clocks into ComposeIdlingResource (
        <a href="https://android-review.googlesource.com/#/q/I326602fc29bac371a42fbdc54023422f8db20eeb">I32660</a>
        )
      </p>
    </li>
  </ul>
  <p><strong>Bug Fixes</strong></p>
  <ul>
    <li>
      Lambdas in offset modifiers now return IntOffset rather than Float. (
      <a href="https://android-review.googlesource.com/#/q/Ic9ee5c05df4c89993ee19f19ddd327a986f21bc1">Ic9ee5</a>
      ,
      <a href="https://issuetracker.google.com/issues/174137212">b/174137212</a>
      ,
      <a href="https://issuetracker.google.com/issues/174146755">b/174146755</a>
      )
    </li>
    <li>
      <p>Removed SlotTable, SlotReader and SlotWriter from the public API. These were marked as InternalComposeAPI previously. Now they are internal to the compose module.</p>

      <p>
        CompositionData and CompositionGroup were added as a replacement for the ui-tooling API to use to extract composition information. These are public but are not intended for use outside the ui-tooling API as they provide the raw information the ui-tooling API interprets (
        <a href="https://android-review.googlesource.com/#/q/I31a9ca6a7e5bbf162c984394dffd7a25b059315a">I31a9c</a>
        )
      </p>
    </li>
    <li>
      <p>Refactored ShaderBrush to lazily create a shader instance when sizing information of the drawing environment is available. This is useful to define gradients that occupy the full drawing bounds of a composable at composition time, without having to implement custom DrawModifier implementations.</p>

      <p>
        Deprecated gradient function constructor APIs in favor of factory methods on a Gradient object. (
        <a href="https://android-review.googlesource.com/#/q/I511fc09bdeb4b41127de4a6b1e616688b10295f5">I511fc</a>
        ,
        <a href="https://issuetracker.google.com/issues/173066799">b/173066799</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecate LazyColumnFor, LazyRowFor, LazyColumnForIndexed and LazyRowForIndexed. Use LazyColumn and LazyRow instead (
        <a href="https://android-review.googlesource.com/#/q/I5b48c8a3b1fef2f603ab69ded1d19709aa9f87fb">I5b48c</a>
        )
      </p>
    </li>
    <li>
      <p>
        Deprecated BuildCompat.isAtLeastR (
        <a href="https://android-review.googlesource.com/#/q/Idb37ed0673c5a8812b60d70de5636bfc3e191d85">Idb37e</a>
        )
      </p>
    </li>
    <li>
      <p>
        Added buildAnnotatedString factory function in order to build an AnnotatedString. Deprecated annotatedString builder function. (
        <a href="https://android-review.googlesource.com/#/q/Idfe0b133687e7b5f377e997b79bd4463161a6d0b">Idfe0b</a>
        )
      </p>
    </li>
    <li>
      <p>
        Removed extension methods on Float and Double to convert values to radians. Moved to be a private function within the implementation PathParser which was the only place where it was used (
        <a href="https://android-review.googlesource.com/#/q/I25f52465ebf2fb238db43eb048cf19823e3fc990">I25f52</a>
        )
      </p>
    </li>
  </ul>
