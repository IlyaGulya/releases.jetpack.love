libraryId: wear-watchface
groupId: androidx.wear
version: 1.1.0-alpha01
releaseDate: 2021-12-15
#language=html
changelogHtml: |
  <h3 id="1.1.0-alpha01" data-text="Version 1.1.0-alpha01" tabindex="-1">Version 1.1.0-alpha01</h3>
  <p>December 15, 2021</p>
  <p>
    <code translate="no" dir="ltr">androidx.wear.watchface:watchface-*:1.1.0-alpha01</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/a0b94773cb4f134522ad5fb19f641b5fec937975..301586664b5aad60548f21866cad502d524dbf9f/wear/watchface">Version 1.1.0-alpha01 contains these commits.</a>
  </p>
  <p><strong>New Features</strong></p>
  <ul>
    <li>
      <p>
        The
        <code translate="no" dir="ltr">UserStyleSchema</code>
        and
        <code translate="no" dir="ltr">ComplicationSlots</code>
        can now be defined in XML. This simplifies watch face construction. In addition,
        <code translate="no" dir="ltr">WatchFaceMetadataClient</code>
        queries are faster because it doesn't need to bind to the service to get the metadata. The
        <code translate="no" dir="ltr">WatchFaceMetadataClient</code>
        and
        <code translate="no" dir="ltr">ListenableWatchFaceMetadataClient</code>
        are no longer experimental and will become part of the stable api. The system will be able to optionally support multiple instances of a watch face, each with distinct user defined styling options. These will be visible in the watch face picker. To opt into this a watch face must include the following meta data tag in its manifest.
      </p>
      <div></div>
      <devsite-code>
        <pre class="devsite-click-to-copy" translate="no" dir="ltr" is-upgraded="" syntax="XML"><code translate="no" dir="ltr"><span class="devsite-syntax-w">    </span>&lt;meta-data
  <span class="devsite-syntax-w">        </span>android:name="androidx.wear.watchface.MULTIPLE_INSTANCES_ALLOWED"
  <span class="devsite-syntax-w">        </span>android:value="true"<span class="devsite-syntax-w"> </span>/&gt;
  </code></pre>
      </devsite-code>
    </li>
    <li>
      <p>
        Some watch faces have state that’s not captured in the
        <code translate="no" dir="ltr">UserStyle</code>
        , to support this and multiple instances, the watch face's instance ID is now available via
        <code translate="no" dir="ltr">WatchState.watchFaceInstanceId</code>
        .
      </p>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">ComplicationData</code>
        is now being cached to allow complications to be displayed immediately upon loading. Sometimes
        <code translate="no" dir="ltr">ComplicationData</code>
        is cached in memory by the system and sometimes it is serialized by the watch face libraries. When serialized any associated tapAction will be lost, if this happens
        <code translate="no" dir="ltr">ComplicationData.tapActionLostDueToSerialization</code>
        will return
        <code translate="no" dir="ltr">true</code>
        and the watch face should render the complication differently (e.g. grayed out or semi-transparent) to signal that it can’t be tapped. The system will send updated
        <code translate="no" dir="ltr">ComplicationData</code>
        with a
        <code translate="no" dir="ltr">tapAction</code>
        as soon as possible.
      </p>
    </li>
    <li>
      <p>
        Some
        <code translate="no" dir="ltr">ComplicationData</code>
        shouldn’t be cached for a long time, to support this we’ve added a more general feature
        <code translate="no" dir="ltr">ComplicationDataTimeline</code>
        . This can be used to provide a sequence of time-gated
        <code translate="no" dir="ltr">ComplicationData</code>
        to be delivered to the watch face which can be cached and updated automatically. For example, today's weather forecast at various times or multiple upcoming calendar events.
        <code translate="no" dir="ltr">ComplicationRequestListener</code>
        has been extended with a new method
        <code translate="no" dir="ltr">onComplicationDataTimeline</code>
        which you can use to return this data.
      </p>
    </li>
    <li>
      <p>
        <code translate="no" dir="ltr">DefaultComplicationDataSourcePolicy</code>
        has been extended so you can specify the
        <code translate="no" dir="ltr">ComplicationType</code>
        for the primary and secondary data sources.
      </p>
    </li>
    <li>
      <p>
        We've added support for synchronous complication providers where the complication is updated at a higher frequency than normal, up to once per second when the watch face is visible and non-ambient.
        <em>Note:</em>
        synchronous complication providers may have limited usage due to memory pressure concerns.
      </p>
    </li>
    <li>
      <p>
        The
        <code translate="no" dir="ltr">PendingIntentTapListener</code>
        changes are likely to be reverted because we solved the underlying problem (it’s not possible for the watch face to launch activities for 5 seconds after pressing the home button) in the framework instead.
      </p>
    </li>
  </ul>
  <p><strong>API Changes</strong></p>
  <ul>
    <li>
      <code translate="no" dir="ltr">ComplicationData.isCached</code>
      has been changed to
      <code translate="no" dir="ltr">tapActionLostDueToSerialization</code>
      which is more useful when determining if the complication slot should be rendered differently to signal that it can't be tapped. (
      <a href="https://android-review.googlesource.com/#/q/I6de2f4f550a31ebdbcaf2490bd1706fb85f2ab68">I6de2f</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">ComplicationDataTimeline</code>
      to
      <code translate="no" dir="ltr">wear-complication-data-source</code>
      . This can be used to provide a sequence of time-gated
      <code translate="no" dir="ltr">ComplicationData</code>
      to be delivered to the watch face which can be cached and updated automatically. For example, today's weather forecast at various times or multiple upcoming calendar events.
      <code translate="no" dir="ltr">ComplicationRequestListener</code>
      has been extended with a new method
      <code translate="no" dir="ltr">onComplicationDataTimeline</code>
      which you can use to return this data. There's a new kotlin wrapper
      <code translate="no" dir="ltr">SuspendingTimelineComplicationDataSourceService</code>
      for suspending data source services. (
      <a href="https://android-review.googlesource.com/#/q/Idecdc0c92a52ff9591b7a84e500986d4817719be">Idecdc</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">PendingIntentTapListener</code>
      and
      <code translate="no" dir="ltr">WatchFaceControlClient.getPendingIntentForTouchEvent</code>
      . This can help watch faces that need to launch intents in response to taps to work around a problem where the framework blocks launching new activities for 5 seconds after pressing the home button. (
      <a href="https://android-review.googlesource.com/#/q/I980744748c89de92da0f9e07d49e6b2d7c99410a">I98074</a>
      )
    </li>
    <li>
      Introduced a per-watchface
      <code translate="no" dir="ltr">ComplicationData</code>
      cache. The purpose of this is to allow the watch face to display last known complication data values upon loading until the system has had a chance to update them. There is a new API method
      <code translate="no" dir="ltr">WatchFaceControlClient.hasComplicationCache</code>
      intended for OEMs. This may influence the system's strategy for sending complications to a watch face. In addition,
      <code translate="no" dir="ltr">ComplicationData</code>
      has an
      <code translate="no" dir="ltr">isCached</code>
      property and it is recommended that cached complications are rendered differently because the
      <code translate="no" dir="ltr">tapAction</code>
      can not be cached and will be
      <code translate="no" dir="ltr">null</code>
      in a cached complication. (
      <a href="https://android-review.googlesource.com/#/q/I404b06e624e745b0ae5d48558658825c9c1cc7f3">I404b0</a>
      )
    </li>
    <li>
      The watch face's instance ID is now available via
      <code translate="no" dir="ltr">WatchState.watchFaceInstanceId</code>
      . Most watch faces won't need to use this, but if there's a per-watch face state that's not stored in the Schema then this is the key to use to identify the watch face instance. To help support this you can now provide an ID when calling
      <code translate="no" dir="ltr">WatchFaceControlClient.createHeadlessWatchFaceClient</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I1ff987d6920b71b736bd3e4c3ac8c2f4b658b77b">I1ff98</a>
      )
    </li>
    <li>
      Extended
      <code translate="no" dir="ltr">DefaultComplicationDataSourcePolicy</code>
      with the ability to set the default
      <code translate="no" dir="ltr">ComplicationTypes</code>
      for the primary, secondary provider and for the fallback system provider.
      <code translate="no" dir="ltr">ComplicationSlot.defaultDataSourceType</code>
      is now deprecated. (
      <a href="https://android-review.googlesource.com/#/q/If0ce3d8de82c41b22cd178bc79c1951cc719cc87">If0ce3</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">ComplicationSlot.configExtras</code>
      is now mutable and can be updated before calling
      <code translate="no" dir="ltr">EditorSession.openComplicationDataSourceChooser()</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I6f8520a9e5574d2c778ad6ea1683ab7730235815">I6f852</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">WatchFace.setComplicationDeniedDialogIntent</code>
      and
      <code translate="no" dir="ltr">setComplicationRationaleDialogIntent</code>
      . These intents are launched to to show a rationale dialog before requesting complication permissions, and another dialog explaining that complication permission is needed when trying to edit a complication when permissions have been denied (the provider chooser will fail to open so the dialog is needed). (
      <a href="https://android-review.googlesource.com/#/q/I3a29c8eec8c80e741176596dc2fd3a320688f902">I3a29c</a>
      )
    </li>
    <li>
      The
      <code translate="no" dir="ltr">UserStyleSchema</code>
      and
      <code translate="no" dir="ltr">ComplicationSlots</code>
      can now be defined in XML. This simplifies watch face construction and makes
      <code translate="no" dir="ltr">WatchFaceMetadataClient</code>
      queries faster as they do not need to bind to the service to get the metadata. (
      <a href="https://android-review.googlesource.com/#/q/I85bfa873f945e489a64abaff492466a95e7119bc">I85bfa</a>
      )
    </li>
    <li>
      Added
      <code translate="no" dir="ltr">InteractiveWatchFaceClient.supportsPendingIntentForTouchEvent</code>
      so a client can determine if a watch face supports
      <code translate="no" dir="ltr">getPendingIntentForTouchEvent</code>
      . (
      <a href="https://android-review.googlesource.com/#/q/I0b91706e201ff5f4ed7afecab65a5a4910e4f5a4">I0b917</a>
      )
    </li>
    <li>
      <code translate="no" dir="ltr">WatchFaceMetadataClient</code>
      and
      <code translate="no" dir="ltr">ListenableWatchFaceMetadataClient</code>
      are no longer experimental. They can be used to efficiently obtain watch face metadata, where possible without opening a binder to the watch face. (
      <a href="https://android-review.googlesource.com/#/q/Ibb827764730181ba10491f0065d6a76a225a4d41">Ibb827</a>
      )
    </li>
    <li>
      Added support for synchronous complication providers where the complication is updated at a higher frequency than normal, up to once per second when the watch face is visible and non-ambient. To use this the provider must include a new
      <code translate="no" dir="ltr">androidx.wear.watchface.complications.data.source.SYNCHRONOUS_UPDATE_PERIOD_SECONDS</code>
      metadata tag in its manifest and override
      <code translate="no" dir="ltr">onSynchronousComplicationRequest</code>
      . Depending on the nature of the data source, it may also need to override
      <code translate="no" dir="ltr">onStartSynchronousComplicationRequests</code>
      and
      <code translate="no" dir="ltr">onStopInteractiveComplicationRequests</code>
      to get notifications of when the complication enters and exits interactive mode. (
      <a href="https://android-review.googlesource.com/#/q/I8fe9dcbd9b4a3a293322b69aa91c4c3a25325c63">I8fe9d</a>
      )
    </li>
  </ul>
  <h2 id="version_10_2" data-text="Version 1.0" tabindex="-1">Version 1.0</h2>
