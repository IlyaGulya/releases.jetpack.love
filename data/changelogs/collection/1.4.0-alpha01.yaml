libraryId: collection
groupId: androidx.collection
version: 1.4.0-alpha01
releaseDate: 2023-10-04
#language=html
changelogHtml: |
  <h3 id="1.4.0-alpha01" data-text="Version 1.4.0-alpha01" tabindex="-1">Version 1.4.0-alpha01</h3>
  <p>October 4, 2023</p>
  <p>
    <code translate="no" dir="ltr">androidx.collection:collection-*:1.4.0-alpha01</code>
    is released.
    <a href="https://android.googlesource.com/platform/frameworks/support/+log/b4a3474b543fec681c14700d322e9d2ed8f2cce6/collection">Version 1.4.0-alpha01 contains these commits.</a>
  </p>
  <p><strong>New Features</strong></p>
  <p>New high-efficiency collections have been added that have low allocation overhead and high performance:</p>
  <ul>
    <li>
      <code translate="no" dir="ltr">MutableScatterMap</code>
      &amp;
      <code translate="no" dir="ltr">ScatterMap</code>
      - Classes with
      <code translate="no" dir="ltr">MutableMap</code>
      &amp; Map-like API
    </li>
    <li>
      <code translate="no" dir="ltr">MutableScatterSet</code>
      &amp;
      <code translate="no" dir="ltr">ScatterSet</code>
      - Classes with
      <code translate="no" dir="ltr">MutableSet</code>
      &amp; Set-like API
    </li>
    <li>
      <code translate="no" dir="ltr">MutableObjectList</code>
      &amp;
      <code translate="no" dir="ltr">ObjectList</code>
      - Classes with
      <code translate="no" dir="ltr">MutableList</code>
      &amp; List-like API
    </li>
  </ul>
  <p>New high-efficiency collections for storing primitives without boxing have been added:</p>
  <ul>
    <li>
      <code translate="no" dir="ltr">Mutable[Int|Float|Long]List</code>
      - Classes with
      <code translate="no" dir="ltr">MutableList&lt;Int|Float|Long&gt;</code>
      -like API. The read-only
      <code translate="no" dir="ltr">[Int|Float|Long]List</code>
      also exists. For example, integers can be held in an
      <code translate="no" dir="ltr">IntList</code>
      .
    </li>
    <li>
      <code translate="no" dir="ltr">Mutable[Int|Float|Long]Set</code>
      - Classes with
      <code translate="no" dir="ltr">MutableSet&lt;Int|Float|Long&gt;</code>
      -like API. The read-only
      <code translate="no" dir="ltr">[Int|Float|Long]Set</code>
      also exists. For example, integers can be held in an IntSet.
    </li>
    <li>
      <code translate="no" dir="ltr">Mutable[Int|Float|Long|Object][Int|Float|Long|Object]Map</code>
      - Classes with
      <code translate="no" dir="ltr">Mutable&lt;Int|Float|Long,T, Int|Float|Long|T&gt;</code>
      -like API. The read-only
      <code translate="no" dir="ltr">[Int|Float|Long|Object][Int|Float|Long|Object]Map</code>
      also exists. For example, a map with an integer key and a reference type value is an
      <code translate="no" dir="ltr">IntObjectMap&lt;T&gt;</code>
      . A map with a long key and a float value is a
      <code translate="no" dir="ltr">LongFloatMap</code>
      . There is no version with the name
      <code translate="no" dir="ltr">ObjectObjectMap</code>
      because that is covered by
      <code translate="no" dir="ltr">ScatterMap/MutableScatterMap</code>
      .
    </li>
  </ul>
